
/Users/alvarosaburido/as/electronics/electronics-lab/Particle/dot-matrix-particle/target/1.5.0/photon/dot-matrix-particle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002784  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a27a0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000000  080a27a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005c8  20000070  20000070  00030070  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a2814  080a2814  00022814  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a283c  080a283c  0002283c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000aea88  00000000  00000000  00022840  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000fd4a  00000000  00000000  000d12c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00015394  00000000  00000000  000e1012  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000020d0  00000000  00000000  000f63a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003468  00000000  00000000  000f8476  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00027591  00000000  00000000  000fb8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00026561  00000000  00000000  00122e6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ac5e4  00000000  00000000  001493d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bb70  00000000  00000000  001f59b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 ff4f 	bl	80a1ed0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 ff54 	bl	80a1ee6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a27a4 	.word	0x080a27a4
 80a004c:	20000070 	.word	0x20000070
 80a0050:	20000070 	.word	0x20000070
 80a0054:	20000638 	.word	0x20000638
 80a0058:	20000638 	.word	0x20000638

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fa39 	bl	80a14d4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a2768 	.word	0x080a2768
 80a0084:	080a27a0 	.word	0x080a27a0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b81e 	b.w	80a00c8 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f837 	bl	80a0100 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 b9df 	b.w	80a1458 <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 bdf7 	b.w	80a0c8c <free>
	...

080a00a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00a2:	4a03      	ldr	r2, [pc, #12]	; (80a00b0 <__cxa_pure_virtual+0x10>)
 80a00a4:	2100      	movs	r1, #0
 80a00a6:	200c      	movs	r0, #12
 80a00a8:	f000 fd64 	bl	80a0b74 <panic_>
 80a00ac:	e7fe      	b.n	80a00ac <__cxa_pure_virtual+0xc>
 80a00ae:	bf00      	nop
 80a00b0:	080a0931 	.word	0x080a0931

080a00b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00b4:	7800      	ldrb	r0, [r0, #0]
 80a00b6:	fab0 f080 	clz	r0, r0
 80a00ba:	0940      	lsrs	r0, r0, #5
 80a00bc:	4770      	bx	lr

080a00be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00be:	2301      	movs	r3, #1
 80a00c0:	7003      	strb	r3, [r0, #0]
 80a00c2:	4770      	bx	lr

080a00c4 <_ZN18Adafruit_8x8matrixD1Ev>:
  void drawPixel(int16_t x, int16_t y, uint16_t color);

 private:
};

class Adafruit_8x8matrix : public Adafruit_LEDBackpack, public Adafruit_GFX {
 80a00c4:	4770      	bx	lr
	...

080a00c8 <setup>:
float fmap (float value, float fromLow, float fromHigh, float toLow, float toHigh) {
  return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow;
}

// setup() runs once, when the device is first turned on.
void setup() {
 80a00c8:	b508      	push	{r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600); // 9600 bps
 80a00ca:	f001 f8d1 	bl	80a1270 <_Z16_fetch_usbserialv>
 80a00ce:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00d2:	f001 f8b3 	bl	80a123c <_ZN9USBSerial5beginEl>
  pinMode(JoyStick_X, INPUT);
 80a00d6:	2100      	movs	r1, #0
 80a00d8:	200a      	movs	r0, #10
 80a00da:	f001 fa49 	bl	80a1570 <pinMode>
  pinMode(JoyStick_Y, INPUT);
 80a00de:	2100      	movs	r1, #0
 80a00e0:	200b      	movs	r0, #11
 80a00e2:	f001 fa45 	bl	80a1570 <pinMode>
  pinMode(JoyStick_Z, INPUT);
 80a00e6:	2100      	movs	r1, #0
 80a00e8:	2003      	movs	r0, #3
 80a00ea:	f001 fa41 	bl	80a1570 <pinMode>
  matrix.begin(0x70);  // pass in the address
}
 80a00ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  // Put initialization like pinMode and begin functions here.
  Serial.begin(9600); // 9600 bps
  pinMode(JoyStick_X, INPUT);
  pinMode(JoyStick_Y, INPUT);
  pinMode(JoyStick_Z, INPUT);
  matrix.begin(0x70);  // pass in the address
 80a00f2:	2170      	movs	r1, #112	; 0x70
 80a00f4:	4801      	ldr	r0, [pc, #4]	; (80a00fc <setup+0x34>)
 80a00f6:	f000 bbaa 	b.w	80a084e <_ZN20Adafruit_LEDBackpack5beginEh>
 80a00fa:	bf00      	nop
 80a00fc:	20000094 	.word	0x20000094

080a0100 <loop>:
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0100:	b570      	push	{r4, r5, r6, lr}
  // The core of your code will likely live here.
  matrix.clear();
 80a0102:	483f      	ldr	r0, [pc, #252]	; (80a0200 <loop+0x100>)
 80a0104:	f000 fbe6 	bl	80a08d4 <_ZN20Adafruit_LEDBackpack5clearEv>
  dx=fmap(analogRead(JoyStick_X), ADC_MIN, ADC_MAX, -1, 1);
 80a0108:	200a      	movs	r0, #10
 80a010a:	f001 fa55 	bl	80a15b8 <analogRead>
 80a010e:	f001 fd07 	bl	80a1b20 <__aeabi_i2f>
 80a0112:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80a0116:	f001 fc4d 	bl	80a19b4 <__aeabi_fsub>
 80a011a:	4601      	mov	r1, r0
 80a011c:	f001 fc4c 	bl	80a19b8 <__addsf3>
 80a0120:	4938      	ldr	r1, [pc, #224]	; (80a0204 <loop+0x104>)
 80a0122:	f001 fe05 	bl	80a1d30 <__aeabi_fdiv>
 80a0126:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a012a:	f001 fc43 	bl	80a19b4 <__aeabi_fsub>
 80a012e:	f001 fe9b 	bl	80a1e68 <__aeabi_f2iz>
 80a0132:	4e35      	ldr	r6, [pc, #212]	; (80a0208 <loop+0x108>)
  dy=fmap(analogRead(JoyStick_Y), ADC_MIN, ADC_MAX, -1, 1);
 80a0134:	4c35      	ldr	r4, [pc, #212]	; (80a020c <loop+0x10c>)

// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  matrix.clear();
  dx=fmap(analogRead(JoyStick_X), ADC_MIN, ADC_MAX, -1, 1);
 80a0136:	6030      	str	r0, [r6, #0]
  dy=fmap(analogRead(JoyStick_Y), ADC_MIN, ADC_MAX, -1, 1);
 80a0138:	200b      	movs	r0, #11
 80a013a:	f001 fa3d 	bl	80a15b8 <analogRead>
 80a013e:	f001 fcef 	bl	80a1b20 <__aeabi_i2f>
 80a0142:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80a0146:	f001 fc35 	bl	80a19b4 <__aeabi_fsub>
 80a014a:	4601      	mov	r1, r0
 80a014c:	f001 fc34 	bl	80a19b8 <__addsf3>
 80a0150:	492c      	ldr	r1, [pc, #176]	; (80a0204 <loop+0x104>)
 80a0152:	f001 fded 	bl	80a1d30 <__aeabi_fdiv>
 80a0156:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a015a:	f001 fc2b 	bl	80a19b4 <__aeabi_fsub>
 80a015e:	f001 fe83 	bl	80a1e68 <__aeabi_f2iz>
 80a0162:	6020      	str	r0, [r4, #0]
  z=digitalRead(JoyStick_Z);
 80a0164:	2003      	movs	r0, #3
 80a0166:	f001 fa14 	bl	80a1592 <digitalRead>
  if(x + dx >= 0 && x + dx < 8) {
 80a016a:	4d29      	ldr	r5, [pc, #164]	; (80a0210 <loop+0x110>)
void loop() {
  // The core of your code will likely live here.
  matrix.clear();
  dx=fmap(analogRead(JoyStick_X), ADC_MIN, ADC_MAX, -1, 1);
  dy=fmap(analogRead(JoyStick_Y), ADC_MIN, ADC_MAX, -1, 1);
  z=digitalRead(JoyStick_Z);
 80a016c:	4b29      	ldr	r3, [pc, #164]	; (80a0214 <loop+0x114>)
  if(x + dx >= 0 && x + dx < 8) {
 80a016e:	682a      	ldr	r2, [r5, #0]
void loop() {
  // The core of your code will likely live here.
  matrix.clear();
  dx=fmap(analogRead(JoyStick_X), ADC_MIN, ADC_MAX, -1, 1);
  dy=fmap(analogRead(JoyStick_Y), ADC_MIN, ADC_MAX, -1, 1);
  z=digitalRead(JoyStick_Z);
 80a0170:	6018      	str	r0, [r3, #0]
  if(x + dx >= 0 && x + dx < 8) {
 80a0172:	6833      	ldr	r3, [r6, #0]
    x += dx;
  }
  if(y + dy >= 0 && y + dy < 8) {
    y += dy;
  }
  matrix.drawPixel(x,y, LED_ON);
 80a0174:	4828      	ldr	r0, [pc, #160]	; (80a0218 <loop+0x118>)
  // The core of your code will likely live here.
  matrix.clear();
  dx=fmap(analogRead(JoyStick_X), ADC_MIN, ADC_MAX, -1, 1);
  dy=fmap(analogRead(JoyStick_Y), ADC_MIN, ADC_MAX, -1, 1);
  z=digitalRead(JoyStick_Z);
  if(x + dx >= 0 && x + dx < 8) {
 80a0176:	4413      	add	r3, r2
 80a0178:	4622      	mov	r2, r4
    x += dx;
  }
  if(y + dy >= 0 && y + dy < 8) {
 80a017a:	4c28      	ldr	r4, [pc, #160]	; (80a021c <loop+0x11c>)
  // The core of your code will likely live here.
  matrix.clear();
  dx=fmap(analogRead(JoyStick_X), ADC_MIN, ADC_MAX, -1, 1);
  dy=fmap(analogRead(JoyStick_Y), ADC_MIN, ADC_MAX, -1, 1);
  z=digitalRead(JoyStick_Z);
  if(x + dx >= 0 && x + dx < 8) {
 80a017c:	2b07      	cmp	r3, #7
    x += dx;
 80a017e:	bf98      	it	ls
 80a0180:	602b      	strls	r3, [r5, #0]
  }
  if(y + dy >= 0 && y + dy < 8) {
 80a0182:	6821      	ldr	r1, [r4, #0]
 80a0184:	6813      	ldr	r3, [r2, #0]
 80a0186:	440b      	add	r3, r1
 80a0188:	2b07      	cmp	r3, #7
    y += dy;
 80a018a:	bf98      	it	ls
 80a018c:	6023      	strls	r3, [r4, #0]
  }
  matrix.drawPixel(x,y, LED_ON);
 80a018e:	f9b5 1000 	ldrsh.w	r1, [r5]
 80a0192:	2301      	movs	r3, #1
 80a0194:	f9b4 2000 	ldrsh.w	r2, [r4]
 80a0198:	f000 faeb 	bl	80a0772 <_ZN18Adafruit_8x8matrix9drawPixelEsst>
	matrix.writeDisplay();
 80a019c:	4818      	ldr	r0, [pc, #96]	; (80a0200 <loop+0x100>)
 80a019e:	f000 fb75 	bl	80a088c <_ZN20Adafruit_LEDBackpack12writeDisplayEv>
  Serial.print(x);
 80a01a2:	f001 f865 	bl	80a1270 <_Z16_fetch_usbserialv>
 80a01a6:	682d      	ldr	r5, [r5, #0]
 80a01a8:	4606      	mov	r6, r0
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a01aa:	2d00      	cmp	r5, #0
 80a01ac:	da04      	bge.n	80a01b8 <loop+0xb8>
            t = print('-');
 80a01ae:	212d      	movs	r1, #45	; 0x2d
 80a01b0:	f000 feca 	bl	80a0f48 <_ZN5Print5printEc>
            val = -n;
 80a01b4:	4269      	negs	r1, r5
 80a01b6:	e000      	b.n	80a01ba <loop+0xba>
        } else {
            val = n;
 80a01b8:	4629      	mov	r1, r5
        }
        return printNumber(val, base) + t;
 80a01ba:	220a      	movs	r2, #10
 80a01bc:	4630      	mov	r0, r6
 80a01be:	f000 fed2 	bl	80a0f66 <_ZN5Print11printNumberEmh>
  Serial.print('-');
 80a01c2:	f001 f855 	bl	80a1270 <_Z16_fetch_usbserialv>
 80a01c6:	212d      	movs	r1, #45	; 0x2d
 80a01c8:	f000 febe 	bl	80a0f48 <_ZN5Print5printEc>
  Serial.print(y);
 80a01cc:	f001 f850 	bl	80a1270 <_Z16_fetch_usbserialv>
 80a01d0:	6824      	ldr	r4, [r4, #0]
 80a01d2:	4605      	mov	r5, r0
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a01d4:	2c00      	cmp	r4, #0
 80a01d6:	da04      	bge.n	80a01e2 <loop+0xe2>
            t = print('-');
 80a01d8:	212d      	movs	r1, #45	; 0x2d
 80a01da:	f000 feb5 	bl	80a0f48 <_ZN5Print5printEc>
            val = -n;
 80a01de:	4261      	negs	r1, r4
 80a01e0:	e000      	b.n	80a01e4 <loop+0xe4>
        } else {
            val = n;
 80a01e2:	4621      	mov	r1, r4
        }
        return printNumber(val, base) + t;
 80a01e4:	220a      	movs	r2, #10
 80a01e6:	4628      	mov	r0, r5
 80a01e8:	f000 febd 	bl	80a0f66 <_ZN5Print11printNumberEmh>
  Serial.println();
 80a01ec:	f001 f840 	bl	80a1270 <_Z16_fetch_usbserialv>
 80a01f0:	f000 fead 	bl	80a0f4e <_ZN5Print7printlnEv>
  delay(SPEED);
}
 80a01f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	matrix.writeDisplay();
  Serial.print(x);
  Serial.print('-');
  Serial.print(y);
  Serial.println();
  delay(SPEED);
 80a01f8:	20c8      	movs	r0, #200	; 0xc8
 80a01fa:	f000 bd4f 	b.w	80a0c9c <delay>
 80a01fe:	bf00      	nop
 80a0200:	20000094 	.word	0x20000094
 80a0204:	457f9000 	.word	0x457f9000
 80a0208:	200000ac 	.word	0x200000ac
 80a020c:	200000b0 	.word	0x200000b0
 80a0210:	20000000 	.word	0x20000000
 80a0214:	200000a8 	.word	0x200000a8
 80a0218:	20000074 	.word	0x20000074
 80a021c:	20000004 	.word	0x20000004

080a0220 <_ZN18Adafruit_8x8matrixD0Ev>:
 80a0220:	b510      	push	{r4, lr}
 80a0222:	4604      	mov	r4, r0
 80a0224:	2134      	movs	r1, #52	; 0x34
 80a0226:	f001 fa5c 	bl	80a16e2 <_ZdlPvj>
 80a022a:	4620      	mov	r0, r4
 80a022c:	bd10      	pop	{r4, pc}
	...

080a0230 <_GLOBAL__sub_I_matrix>:
}
 80a0230:	b510      	push	{r4, lr}
 */

#include "Adafruit_LEDBackpack_RK.h"
#include "Adafruit_GFX_RK.h"

Adafruit_8x8matrix matrix = Adafruit_8x8matrix();
 80a0232:	4c06      	ldr	r4, [pc, #24]	; (80a024c <_GLOBAL__sub_I_matrix+0x1c>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0234:	f000 fb8c 	bl	80a0950 <HAL_Pin_Map>
 80a0238:	4620      	mov	r0, r4
 80a023a:	f000 fb53 	bl	80a08e4 <_ZN18Adafruit_8x8matrixC1Ev>
 80a023e:	4620      	mov	r0, r4
  Serial.print(x);
  Serial.print('-');
  Serial.print(y);
  Serial.println();
  delay(SPEED);
}
 80a0240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */

#include "Adafruit_LEDBackpack_RK.h"
#include "Adafruit_GFX_RK.h"

Adafruit_8x8matrix matrix = Adafruit_8x8matrix();
 80a0244:	4a02      	ldr	r2, [pc, #8]	; (80a0250 <_GLOBAL__sub_I_matrix+0x20>)
 80a0246:	4903      	ldr	r1, [pc, #12]	; (80a0254 <_GLOBAL__sub_I_matrix+0x24>)
 80a0248:	f001 ba46 	b.w	80a16d8 <__aeabi_atexit>
 80a024c:	20000074 	.word	0x20000074
 80a0250:	20000070 	.word	0x20000070
 80a0254:	080a00c5 	.word	0x080a00c5

080a0258 <_ZN12Adafruit_GFX8drawLineEsssst>:
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
 80a0258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a025c:	461e      	mov	r6, r3
 80a025e:	b085      	sub	sp, #20
 80a0260:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0264:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0266:	1a9a      	subs	r2, r3, r2
 80a0268:	2a00      	cmp	r2, #0
 80a026a:	bfb8      	it	lt
 80a026c:	4252      	neglt	r2, r2
 80a026e:	9200      	str	r2, [sp, #0]
 80a0270:	1a72      	subs	r2, r6, r1
 80a0272:	2a00      	cmp	r2, #0
 80a0274:	bfb8      	it	lt
 80a0276:	4252      	neglt	r2, r2
 80a0278:	9201      	str	r2, [sp, #4]
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
 80a027a:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a027c:	9a00      	ldr	r2, [sp, #0]
 80a027e:	9901      	ldr	r1, [sp, #4]
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
 80a0280:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0282:	428a      	cmp	r2, r1
  }
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
 80a0284:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0288:	dd05      	ble.n	80a0296 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a028a:	4632      	mov	r2, r6
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
 80a028c:	461e      	mov	r6, r3
 80a028e:	4613      	mov	r3, r2

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
 uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0290:	4622      	mov	r2, r4
    _swap_int16_t(x0, y0);
 80a0292:	462c      	mov	r4, r5
 80a0294:	4615      	mov	r5, r2
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
 80a0296:	42b4      	cmp	r4, r6
 80a0298:	dd05      	ble.n	80a02a6 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a029a:	462a      	mov	r2, r5
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
 80a029c:	461d      	mov	r5, r3
 80a029e:	4613      	mov	r3, r2
  if (steep) {
    _swap_int16_t(x0, y0);
    _swap_int16_t(x1, y1);
  }

  if (x0 > x1) {
 80a02a0:	4622      	mov	r2, r4
 80a02a2:	4634      	mov	r4, r6
 80a02a4:	4616      	mov	r6, r2
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a02a6:	1b5a      	subs	r2, r3, r5
 80a02a8:	2a00      	cmp	r2, #0
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a02aa:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a02ae:	bfb8      	it	lt
 80a02b0:	4252      	neglt	r2, r2
    _swap_int16_t(x0, x1);
    _swap_int16_t(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a02b2:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a02b6:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a02b8:	fa0f f788 	sxth.w	r7, r8
 80a02bc:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a02be:	429d      	cmp	r5, r3
 80a02c0:	bfb4      	ite	lt
 80a02c2:	2301      	movlt	r3, #1
 80a02c4:	f04f 33ff 	movge.w	r3, #4294967295	; 0xffffffff

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a02c8:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a02cc:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a02ce:	42b4      	cmp	r4, r6
 80a02d0:	dc1f      	bgt.n	80a0312 <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a02d2:	9a01      	ldr	r2, [sp, #4]
 80a02d4:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a02d6:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a02d8:	4293      	cmp	r3, r2
 80a02da:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a02de:	bfc8      	it	gt
 80a02e0:	4622      	movgt	r2, r4
 80a02e2:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a02e6:	bfc8      	it	gt
 80a02e8:	4629      	movgt	r1, r5
 80a02ea:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a02ec:	bfdc      	itt	le
 80a02ee:	462a      	movle	r2, r5
 80a02f0:	4621      	movle	r1, r4
 80a02f2:	47d8      	blx	fp
    }
    err -= dy;
 80a02f4:	9b03      	ldr	r3, [sp, #12]
 80a02f6:	1aff      	subs	r7, r7, r3
 80a02f8:	b2bb      	uxth	r3, r7
 80a02fa:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a02fc:	2f00      	cmp	r7, #0
 80a02fe:	da05      	bge.n	80a030c <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a0300:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a0302:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a0306:	4415      	add	r5, r2
 80a0308:	b22d      	sxth	r5, r5
      err += dx;
 80a030a:	b23f      	sxth	r7, r7
 80a030c:	3401      	adds	r4, #1
 80a030e:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a0310:	e7dd      	b.n	80a02ce <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a0312:	b005      	add	sp, #20
 80a0314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0318 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
 80a0318:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a031c:	4604      	mov	r4, r0
 80a031e:	4691      	mov	r9, r2
 80a0320:	460d      	mov	r5, r1
 80a0322:	4698      	mov	r8, r3
 80a0324:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a0328:	6807      	ldr	r7, [r0, #0]
  }
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
 80a032a:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a032e:	9600      	str	r6, [sp, #0]
 80a0330:	69ff      	ldr	r7, [r7, #28]
 80a0332:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a0334:	6823      	ldr	r3, [r4, #0]
 80a0336:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a033a:	9600      	str	r6, [sp, #0]
 80a033c:	444a      	add	r2, r9
 80a033e:	69df      	ldr	r7, [r3, #28]
 80a0340:	4629      	mov	r1, r5
 80a0342:	4643      	mov	r3, r8
 80a0344:	4620      	mov	r0, r4
 80a0346:	b212      	sxth	r2, r2
 80a0348:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a034a:	6823      	ldr	r3, [r4, #0]
 80a034c:	9600      	str	r6, [sp, #0]
 80a034e:	699f      	ldr	r7, [r3, #24]
 80a0350:	464a      	mov	r2, r9
 80a0352:	4653      	mov	r3, sl
 80a0354:	4629      	mov	r1, r5
 80a0356:	4620      	mov	r0, r4
 80a0358:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a035a:	6823      	ldr	r3, [r4, #0]
 80a035c:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 80a0360:	960a      	str	r6, [sp, #40]	; 0x28
 80a0362:	4429      	add	r1, r5
 80a0364:	699d      	ldr	r5, [r3, #24]
 80a0366:	464a      	mov	r2, r9
 80a0368:	4653      	mov	r3, sl
 80a036a:	4620      	mov	r0, r4
 80a036c:	46ac      	mov	ip, r5
 80a036e:	b209      	sxth	r1, r1
}
 80a0370:	b002      	add	sp, #8
 80a0372:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a0376:	4760      	bx	ip

080a0378 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
 int16_t h, uint16_t color) {
 80a0378:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a037a:	3b01      	subs	r3, #1
 80a037c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0380:	4413      	add	r3, r2
 80a0382:	6804      	ldr	r4, [r0, #0]
 80a0384:	b21b      	sxth	r3, r3
 80a0386:	9300      	str	r3, [sp, #0]
 80a0388:	9501      	str	r5, [sp, #4]
 80a038a:	6964      	ldr	r4, [r4, #20]
 80a038c:	460b      	mov	r3, r1
 80a038e:	47a0      	blx	r4
}
 80a0390:	b003      	add	sp, #12
 80a0392:	bd30      	pop	{r4, r5, pc}

080a0394 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
 int16_t w, uint16_t color) {
 80a0394:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a0396:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a039a:	6804      	ldr	r4, [r0, #0]
 80a039c:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a03a0:	3b01      	subs	r3, #1
 80a03a2:	440b      	add	r3, r1
 80a03a4:	6964      	ldr	r4, [r4, #20]
 80a03a6:	b21b      	sxth	r3, r3
 80a03a8:	47a0      	blx	r4
}
 80a03aa:	b003      	add	sp, #12
 80a03ac:	bd30      	pop	{r4, r5, pc}

080a03ae <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
 80a03ae:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a03b2:	4605      	mov	r5, r0
 80a03b4:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a03b6:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
 80a03b8:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a03bc:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a03c0:	eb01 0a03 	add.w	sl, r1, r3
 80a03c4:	4554      	cmp	r4, sl
 80a03c6:	da0b      	bge.n	80a03e0 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a03c8:	682b      	ldr	r3, [r5, #0]
 80a03ca:	f8cd 9000 	str.w	r9, [sp]
 80a03ce:	699e      	ldr	r6, [r3, #24]
 80a03d0:	4621      	mov	r1, r4
 80a03d2:	4643      	mov	r3, r8
 80a03d4:	463a      	mov	r2, r7
 80a03d6:	4628      	mov	r0, r5
 80a03d8:	3401      	adds	r4, #1
 80a03da:	47b0      	blx	r6
 80a03dc:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
 uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a03de:	e7f1      	b.n	80a03c4 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a03e0:	b002      	add	sp, #8
 80a03e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a03e6 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a03e6:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a03e8:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a03ec:	6804      	ldr	r4, [r0, #0]
 80a03ee:	9101      	str	r1, [sp, #4]
 80a03f0:	9200      	str	r2, [sp, #0]
 80a03f2:	2200      	movs	r2, #0
 80a03f4:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a03f8:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a03fa:	4611      	mov	r1, r2
 80a03fc:	47a0      	blx	r4
}
 80a03fe:	b002      	add	sp, #8
 80a0400:	bd10      	pop	{r4, pc}

080a0402 <_ZN12Adafruit_GFX13invertDisplayEb>:

int16_t Adafruit_GFX::height(void) const {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a0402:	4770      	bx	lr

080a0404 <_ZN12Adafruit_GFXC1Ess>:
#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0404:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a0406:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a0408:	f64f 71ff 	movw	r1, #65535	; 0xffff

#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a040c:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a040e:	4d08      	ldr	r5, [pc, #32]	; (80a0430 <_ZN12Adafruit_GFXC1Ess+0x2c>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0410:	2400      	movs	r4, #0
 80a0412:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a0414:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a0416:	2201      	movs	r2, #1
 80a0418:	6044      	str	r4, [r0, #4]
#ifndef _swap_int16_t
#define _swap_int16_t(a, b) { int16_t t = a; a = b; b = t; }
#endif

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a041a:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a041c:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a041e:	8204      	strh	r4, [r0, #16]
 80a0420:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a0422:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a0424:	82c1      	strh	r1, [r0, #22]
 80a0426:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a0428:	7682      	strb	r2, [r0, #26]
  _cp437    = false;
 80a042a:	76c4      	strb	r4, [r0, #27]
  gfxFont   = NULL;
 80a042c:	61c4      	str	r4, [r0, #28]
}
 80a042e:	bd30      	pop	{r4, r5, pc}
 80a0430:	080a2474 	.word	0x080a2474

080a0434 <_ZN12Adafruit_GFX8drawCharEsshtth>:
#endif
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 uint16_t color, uint16_t bg, uint8_t size) {
 80a0434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0438:	b091      	sub	sp, #68	; 0x44
 80a043a:	4692      	mov	sl, r2
 80a043c:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 80a0440:	4689      	mov	r9, r1
 80a0442:	9202      	str	r2, [sp, #8]

  if(!gfxFont) { // 'Classic' built-in font
 80a0444:	69c1      	ldr	r1, [r0, #28]
#endif
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
 uint16_t color, uint16_t bg, uint8_t size) {
 80a0446:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80a044a:	4604      	mov	r4, r0
 80a044c:	9207      	str	r2, [sp, #28]
 80a044e:	f89d 5070 	ldrb.w	r5, [sp, #112]	; 0x70

  if(!gfxFont) { // 'Classic' built-in font
 80a0452:	2900      	cmp	r1, #0
 80a0454:	f040 8089 	bne.w	80a056a <_ZN12Adafruit_GFX8drawCharEsshtth+0x136>

    if((x >= _width)            || // Clip right
 80a0458:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 80a045c:	454a      	cmp	r2, r9
 80a045e:	f340 8104 	ble.w	80a066a <_ZN12Adafruit_GFX8drawCharEsshtth+0x236>
 80a0462:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0466:	4552      	cmp	r2, sl
 80a0468:	f340 80ff 	ble.w	80a066a <_ZN12Adafruit_GFX8drawCharEsshtth+0x236>
       (y >= _height)           || // Clip bottom
 80a046c:	2206      	movs	r2, #6
 80a046e:	fb02 9205 	mla	r2, r2, r5, r9
 80a0472:	2a00      	cmp	r2, #0
 80a0474:	f340 80f9 	ble.w	80a066a <_ZN12Adafruit_GFX8drawCharEsshtth+0x236>
       ((x + 6 * size - 1) < 0) || // Clip left
 80a0478:	eb0a 02c5 	add.w	r2, sl, r5, lsl #3
 80a047c:	2a00      	cmp	r2, #0
 80a047e:	f340 80f4 	ble.w	80a066a <_ZN12Adafruit_GFX8drawCharEsshtth+0x236>
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 80a0482:	7ec2      	ldrb	r2, [r0, #27]
 80a0484:	b91a      	cbnz	r2, 80a048e <_ZN12Adafruit_GFX8drawCharEsshtth+0x5a>
 80a0486:	2baf      	cmp	r3, #175	; 0xaf
 80a0488:	bf84      	itt	hi
 80a048a:	3301      	addhi	r3, #1
 80a048c:	b2db      	uxtbhi	r3, r3

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 80a048e:	2206      	movs	r2, #6
 80a0490:	9209      	str	r2, [sp, #36]	; 0x24
 80a0492:	4a77      	ldr	r2, [pc, #476]	; (80a0670 <_ZN12Adafruit_GFX8drawCharEsshtth+0x23c>)
 80a0494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0498:	18d3      	adds	r3, r2, r3
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
 80a049a:	2700      	movs	r7, #0
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 80a049c:	930c      	str	r3, [sp, #48]	; 0x30
 80a049e:	fa1f f68a 	uxth.w	r6, sl
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
          if(size == 1) drawPixel(x+i, y+j, color);
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a04a2:	46b0      	mov	r8, r6

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 80a04a4:	2f05      	cmp	r7, #5
 80a04a6:	bf16      	itet	ne
 80a04a8:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
      else      line = 0x0;
 80a04aa:	2300      	moveq	r3, #0

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
 80a04ac:	5ddb      	ldrbne	r3, [r3, r7]
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
          if(size == 1) drawPixel(x+i, y+j, color);
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a04ae:	b2ba      	uxth	r2, r7
    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
 80a04b0:	9303      	str	r3, [sp, #12]
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
          if(size == 1) drawPixel(x+i, y+j, color);
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a04b2:	b2ab      	uxth	r3, r5
 80a04b4:	9305      	str	r3, [sp, #20]
 80a04b6:	9905      	ldr	r1, [sp, #20]
 80a04b8:	fa1f f389 	uxth.w	r3, r9
 80a04bc:	fb01 3102 	mla	r1, r1, r2, r3
 80a04c0:	b209      	sxth	r1, r1
 80a04c2:	9108      	str	r1, [sp, #32]
 80a04c4:	f106 0108 	add.w	r1, r6, #8
 80a04c8:	b289      	uxth	r1, r1
        } else if(bg != color) {
          if(size == 1) drawPixel(x+i, y+j, bg);
 80a04ca:	4413      	add	r3, r2
 80a04cc:	910b      	str	r1, [sp, #44]	; 0x2c
 80a04ce:	b21b      	sxth	r3, r3
          else          fillRect(x+i*size, y+j*size, size, size, bg);
 80a04d0:	b229      	sxth	r1, r5
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
          if(size == 1) drawPixel(x+i, y+j, color);
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a04d2:	9606      	str	r6, [sp, #24]
        } else if(bg != color) {
          if(size == 1) drawPixel(x+i, y+j, bg);
          else          fillRect(x+i*size, y+j*size, size, size, bg);
 80a04d4:	9104      	str	r1, [sp, #16]
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
          if(size == 1) drawPixel(x+i, y+j, color);
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
        } else if(bg != color) {
          if(size == 1) drawPixel(x+i, y+j, bg);
 80a04d6:	930a      	str	r3, [sp, #40]	; 0x28
    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
        if(line & 0x1) {
 80a04d8:	9b03      	ldr	r3, [sp, #12]
 80a04da:	07da      	lsls	r2, r3, #31
 80a04dc:	d510      	bpl.n	80a0500 <_ZN12Adafruit_GFX8drawCharEsshtth+0xcc>
          if(size == 1) drawPixel(x+i, y+j, color);
 80a04de:	2d01      	cmp	r5, #1
 80a04e0:	6823      	ldr	r3, [r4, #0]
 80a04e2:	d103      	bne.n	80a04ec <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
 80a04e4:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a04e8:	9b02      	ldr	r3, [sp, #8]
 80a04ea:	e013      	b.n	80a0514 <_ZN12Adafruit_GFX8drawCharEsshtth+0xe0>
          else          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a04ec:	9a02      	ldr	r2, [sp, #8]
 80a04ee:	9201      	str	r2, [sp, #4]
 80a04f0:	9a04      	ldr	r2, [sp, #16]
 80a04f2:	9200      	str	r2, [sp, #0]
 80a04f4:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a04f8:	4613      	mov	r3, r2
 80a04fa:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 80a04fe:	e017      	b.n	80a0530 <_ZN12Adafruit_GFX8drawCharEsshtth+0xfc>
        } else if(bg != color) {
 80a0500:	9b02      	ldr	r3, [sp, #8]
 80a0502:	9a07      	ldr	r2, [sp, #28]
 80a0504:	4293      	cmp	r3, r2
 80a0506:	d016      	beq.n	80a0536 <_ZN12Adafruit_GFX8drawCharEsshtth+0x102>
          if(size == 1) drawPixel(x+i, y+j, bg);
 80a0508:	2d01      	cmp	r5, #1
 80a050a:	6823      	ldr	r3, [r4, #0]
 80a050c:	d108      	bne.n	80a0520 <_ZN12Adafruit_GFX8drawCharEsshtth+0xec>
 80a050e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0512:	4613      	mov	r3, r2
 80a0514:	fa0f f288 	sxth.w	r2, r8
 80a0518:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a051a:	4620      	mov	r0, r4
 80a051c:	47d8      	blx	fp
 80a051e:	e00a      	b.n	80a0536 <_ZN12Adafruit_GFX8drawCharEsshtth+0x102>
          else          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0520:	9a07      	ldr	r2, [sp, #28]
 80a0522:	9201      	str	r2, [sp, #4]
 80a0524:	9a04      	ldr	r2, [sp, #16]
 80a0526:	9200      	str	r2, [sp, #0]
 80a0528:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a052c:	4613      	mov	r3, r2
 80a052e:	b232      	sxth	r2, r6
 80a0530:	9908      	ldr	r1, [sp, #32]
 80a0532:	4620      	mov	r0, r4
 80a0534:	47d8      	blx	fp

    for(int8_t i=0; i<6; i++ ) {
      uint8_t line;
      if(i < 5) line = pgm_read_byte(font+(c*5)+i);
      else      line = 0x0;
      for(int8_t j=0; j<8; j++, line >>= 1) {
 80a0536:	9b03      	ldr	r3, [sp, #12]
 80a0538:	9a05      	ldr	r2, [sp, #20]
 80a053a:	085b      	lsrs	r3, r3, #1
 80a053c:	9303      	str	r3, [sp, #12]
 80a053e:	9b06      	ldr	r3, [sp, #24]
 80a0540:	f108 0801 	add.w	r8, r8, #1
 80a0544:	4413      	add	r3, r2
 80a0546:	b29b      	uxth	r3, r3
 80a0548:	9306      	str	r3, [sp, #24]
 80a054a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80a054c:	fa1f f888 	uxth.w	r8, r8
 80a0550:	4416      	add	r6, r2
 80a0552:	4598      	cmp	r8, r3
 80a0554:	b2b6      	uxth	r6, r6
 80a0556:	d1bf      	bne.n	80a04d8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
 80a0558:	9b09      	ldr	r3, [sp, #36]	; 0x24
       ((y + 8 * size - 1) < 0))   // Clip top
      return;

    if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior

    for(int8_t i=0; i<6; i++ ) {
 80a055a:	3701      	adds	r7, #1
 80a055c:	3b01      	subs	r3, #1
 80a055e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0562:	b27f      	sxtb	r7, r7
 80a0564:	9309      	str	r3, [sp, #36]	; 0x24
 80a0566:	d19a      	bne.n	80a049e <_ZN12Adafruit_GFX8drawCharEsshtth+0x6a>
 80a0568:	e07f      	b.n	80a066a <_ZN12Adafruit_GFX8drawCharEsshtth+0x236>
    // Character is assumed previously filtered by write() to eliminate
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
 80a056a:	7a0a      	ldrb	r2, [r1, #8]
 80a056c:	6848      	ldr	r0, [r1, #4]
 80a056e:	1a9b      	subs	r3, r3, r2
 80a0570:	b2db      	uxtb	r3, r3
 80a0572:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 80a0576:	f830 b033 	ldrh.w	fp, [r0, r3, lsl #3]
    uint8_t  w  = pgm_read_byte(&glyph->width),
 80a057a:	7893      	ldrb	r3, [r2, #2]
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
             yo = pgm_read_byte(&glyph->yOffset);
    uint8_t  xx, yy, bits, bit = 0;
    int16_t  xo16, yo16;

    if(size > 1) {
 80a057c:	2d01      	cmp	r5, #1
    c -= pgm_read_byte(&gfxFont->first);
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t  w  = pgm_read_byte(&glyph->width),
 80a057e:	9306      	str	r3, [sp, #24]
             h  = pgm_read_byte(&glyph->height),
 80a0580:	78d3      	ldrb	r3, [r2, #3]
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 80a0582:	6809      	ldr	r1, [r1, #0]

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
 80a0584:	930c      	str	r3, [sp, #48]	; 0x30
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80a0586:	f992 3005 	ldrsb.w	r3, [r2, #5]
    // newlines, returns, non-printable characters, etc.  Calling drawChar()
    // directly with 'bad' characters of font may cause mayhem!

    c -= pgm_read_byte(&gfxFont->first);
    GFXglyph *glyph  = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    uint8_t  *bitmap = (uint8_t *)pgm_read_pointer(&gfxFont->bitmap);
 80a058a:	910b      	str	r1, [sp, #44]	; 0x2c

    uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
 80a058c:	9307      	str	r3, [sp, #28]
             yo = pgm_read_byte(&glyph->yOffset);
 80a058e:	f992 3006 	ldrsb.w	r3, [r2, #6]
    uint8_t  xx, yy, bits, bit = 0;
    int16_t  xo16, yo16;

    if(size > 1) {
      xo16 = xo;
 80a0592:	bf82      	ittt	hi
 80a0594:	f9bd 601c 	ldrshhi.w	r6, [sp, #28]
      yo16 = yo;
 80a0598:	b21a      	sxthhi	r2, r3
 80a059a:	9209      	strhi	r2, [sp, #36]	; 0x24
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 80a059c:	b2aa      	uxth	r2, r5
 80a059e:	9204      	str	r2, [sp, #16]
 80a05a0:	fa1f f289 	uxth.w	r2, r9
 80a05a4:	9205      	str	r2, [sp, #20]
 80a05a6:	9905      	ldr	r1, [sp, #20]
 80a05a8:	9a04      	ldr	r2, [sp, #16]
 80a05aa:	fb06 1602 	mla	r6, r6, r2, r1
 80a05ae:	b2b2      	uxth	r2, r6
 80a05b0:	920a      	str	r2, [sp, #40]	; 0x28
 80a05b2:	fa1f f28a 	uxth.w	r2, sl
 80a05b6:	2600      	movs	r6, #0
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
 80a05b8:	18d3      	adds	r3, r2, r3
    uint8_t  w  = pgm_read_byte(&glyph->width),
             h  = pgm_read_byte(&glyph->height),
             xa = pgm_read_byte(&glyph->xAdvance);
    int8_t   xo = pgm_read_byte(&glyph->xOffset),
             yo = pgm_read_byte(&glyph->yOffset);
    uint8_t  xx, yy, bits, bit = 0;
 80a05ba:	9603      	str	r6, [sp, #12]
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 80a05bc:	9208      	str	r2, [sp, #32]
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
 80a05be:	930f      	str	r3, [sp, #60]	; 0x3c
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
 80a05c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a05c2:	b2f3      	uxtb	r3, r6
 80a05c4:	4293      	cmp	r3, r2
 80a05c6:	d250      	bcs.n	80a066a <_ZN12Adafruit_GFX8drawCharEsshtth+0x236>
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 80a05c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80a05ca:	9904      	ldr	r1, [sp, #16]
 80a05cc:	9808      	ldr	r0, [sp, #32]
 80a05ce:	18b2      	adds	r2, r6, r2
 80a05d0:	fb02 0201 	mla	r2, r2, r1, r0
 80a05d4:	b212      	sxth	r2, r2
 80a05d6:	920d      	str	r2, [sp, #52]	; 0x34
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
 80a05d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 80a05da:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
 80a05de:	4413      	add	r3, r2
 80a05e0:	b21b      	sxth	r3, r3
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 80a05e2:	f04f 0a00 	mov.w	sl, #0
        if(!(bit++ & 7)) {
          bits = pgm_read_byte(&bitmap[bo++]);
        }
        if(bits & 0x80) {
          if(size == 1) {
            drawPixel(x+xo+xx, y+yo+yy, color);
 80a05e6:	930e      	str	r3, [sp, #56]	; 0x38
 80a05e8:	9b03      	ldr	r3, [sp, #12]
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
      for(xx=0; xx<w; xx++) {
 80a05ea:	9906      	ldr	r1, [sp, #24]
 80a05ec:	fa5f f28a 	uxtb.w	r2, sl
 80a05f0:	4413      	add	r3, r2
 80a05f2:	4291      	cmp	r1, r2
 80a05f4:	b2db      	uxtb	r3, r3
 80a05f6:	d931      	bls.n	80a065c <_ZN12Adafruit_GFX8drawCharEsshtth+0x228>
        if(!(bit++ & 7)) {
 80a05f8:	075b      	lsls	r3, r3, #29
          bits = pgm_read_byte(&bitmap[bo++]);
 80a05fa:	bf01      	itttt	eq
 80a05fc:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
 80a05fe:	f10b 0301 	addeq.w	r3, fp, #1
 80a0602:	f812 800b 	ldrbeq.w	r8, [r2, fp]
 80a0606:	fa1f fb83 	uxtheq.w	fp, r3
        }
        if(bits & 0x80) {
 80a060a:	f018 0f80 	tst.w	r8, #128	; 0x80
 80a060e:	d01a      	beq.n	80a0646 <_ZN12Adafruit_GFX8drawCharEsshtth+0x212>
          if(size == 1) {
 80a0610:	2d01      	cmp	r5, #1
 80a0612:	d10c      	bne.n	80a062e <_ZN12Adafruit_GFX8drawCharEsshtth+0x1fa>
            drawPixel(x+xo+xx, y+yo+yy, color);
 80a0614:	9b05      	ldr	r3, [sp, #20]
 80a0616:	9a07      	ldr	r2, [sp, #28]
 80a0618:	4620      	mov	r0, r4
 80a061a:	1899      	adds	r1, r3, r2
 80a061c:	6823      	ldr	r3, [r4, #0]
 80a061e:	4451      	add	r1, sl
 80a0620:	691b      	ldr	r3, [r3, #16]
 80a0622:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a0624:	461f      	mov	r7, r3
 80a0626:	b209      	sxth	r1, r1
 80a0628:	9b02      	ldr	r3, [sp, #8]
 80a062a:	47b8      	blx	r7
 80a062c:	e00b      	b.n	80a0646 <_ZN12Adafruit_GFX8drawCharEsshtth+0x212>
          } else {
            fillRect(x+(xo16+xx)*size, y+(yo16+yy)*size, size, size, color);
 80a062e:	9902      	ldr	r1, [sp, #8]
 80a0630:	b22b      	sxth	r3, r5
 80a0632:	6822      	ldr	r2, [r4, #0]
 80a0634:	9101      	str	r1, [sp, #4]
 80a0636:	9300      	str	r3, [sp, #0]
 80a0638:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80a063a:	fa0f f189 	sxth.w	r1, r9
 80a063e:	4617      	mov	r7, r2
 80a0640:	4620      	mov	r0, r4
 80a0642:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80a0644:	47b8      	blx	r7
 80a0646:	9b04      	ldr	r3, [sp, #16]
          }
        }
        bits <<= 1;
 80a0648:	ea4f 0848 	mov.w	r8, r8, lsl #1
 80a064c:	4499      	add	r9, r3
 80a064e:	fa5f f888 	uxtb.w	r8, r8
 80a0652:	f10a 0a01 	add.w	sl, sl, #1
 80a0656:	fa1f f989 	uxth.w	r9, r9
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
      for(xx=0; xx<w; xx++) {
 80a065a:	e7c5      	b.n	80a05e8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x1b4>
 80a065c:	9b06      	ldr	r3, [sp, #24]
 80a065e:	9a03      	ldr	r2, [sp, #12]
 80a0660:	3601      	adds	r6, #1
 80a0662:	441a      	add	r2, r3
 80a0664:	b2d3      	uxtb	r3, r2
 80a0666:	9303      	str	r3, [sp, #12]
    // only creates a new set of problems.  Have an idea to work around
    // this (a canvas object type for MCUs that can afford the RAM and
    // displays supporting setAddrWindow() and pushColors()), but haven't
    // implemented this yet.

    for(yy=0; yy<h; yy++) {
 80a0668:	e7aa      	b.n	80a05c0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x18c>
        bits <<= 1;
      }
    }

  } // End classic vs custom font
}
 80a066a:	b011      	add	sp, #68	; 0x44
 80a066c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0670:	080a1f6c 	.word	0x080a1f6c

080a0674 <_ZN12Adafruit_GFX5writeEh>:
    }
  }
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
 80a0674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
#else
void Adafruit_GFX::write(uint8_t c) {
#endif

  if(!gfxFont) { // 'Classic' built-in font
 80a0676:	69c2      	ldr	r2, [r0, #28]
    }
  }
}

#if ARDUINO >= 100
size_t Adafruit_GFX::write(uint8_t c) {
 80a0678:	4604      	mov	r4, r0
 80a067a:	460b      	mov	r3, r1
#else
void Adafruit_GFX::write(uint8_t c) {
#endif

  if(!gfxFont) { // 'Classic' built-in font
 80a067c:	2a00      	cmp	r2, #0
 80a067e:	d12e      	bne.n	80a06de <_ZN12Adafruit_GFX5writeEh+0x6a>

    if(c == '\n') {
 80a0680:	290a      	cmp	r1, #10
 80a0682:	d106      	bne.n	80a0692 <_ZN12Adafruit_GFX5writeEh+0x1e>
      cursor_y += textsize*8;
 80a0684:	8a43      	ldrh	r3, [r0, #18]
 80a0686:	7e01      	ldrb	r1, [r0, #24]
      cursor_x  = 0;
 80a0688:	8202      	strh	r2, [r0, #16]
#endif

  if(!gfxFont) { // 'Classic' built-in font

    if(c == '\n') {
      cursor_y += textsize*8;
 80a068a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a068e:	8243      	strh	r3, [r0, #18]
 80a0690:	e068      	b.n	80a0764 <_ZN12Adafruit_GFX5writeEh+0xf0>
      cursor_x  = 0;
    } else if(c == '\r') {
 80a0692:	290d      	cmp	r1, #13
 80a0694:	d066      	beq.n	80a0764 <_ZN12Adafruit_GFX5writeEh+0xf0>
      // skip em
    } else {
      if(wrap && ((cursor_x + textsize * 6) >= _width)) { // Heading off edge?
 80a0696:	7e81      	ldrb	r1, [r0, #26]
 80a0698:	7e00      	ldrb	r0, [r0, #24]
 80a069a:	b169      	cbz	r1, 80a06b8 <_ZN12Adafruit_GFX5writeEh+0x44>
 80a069c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
 80a06a0:	2106      	movs	r1, #6
 80a06a2:	fb01 5100 	mla	r1, r1, r0, r5
 80a06a6:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80a06aa:	42a9      	cmp	r1, r5
        cursor_x  = 0;            // Reset x to zero
 80a06ac:	bfa1      	itttt	ge
 80a06ae:	8222      	strhge	r2, [r4, #16]
        cursor_y += textsize * 8; // Advance y one line
 80a06b0:	8a62      	ldrhge	r2, [r4, #18]
 80a06b2:	eb02 02c0 	addge.w	r2, r2, r0, lsl #3
 80a06b6:	8262      	strhge	r2, [r4, #18]
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a06b8:	9002      	str	r0, [sp, #8]
 80a06ba:	8ae0      	ldrh	r0, [r4, #22]
 80a06bc:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a06c0:	9001      	str	r0, [sp, #4]
 80a06c2:	8aa0      	ldrh	r0, [r4, #20]
 80a06c4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a06c8:	9000      	str	r0, [sp, #0]
 80a06ca:	4620      	mov	r0, r4
 80a06cc:	f7ff feb2 	bl	80a0434 <_ZN12Adafruit_GFX8drawCharEsshtth>
      cursor_x += textsize * 6;
 80a06d0:	7e23      	ldrb	r3, [r4, #24]
 80a06d2:	8a22      	ldrh	r2, [r4, #16]
 80a06d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a06d8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80a06dc:	e041      	b.n	80a0762 <_ZN12Adafruit_GFX5writeEh+0xee>
    }

  } else { // Custom font

    if(c == '\n') {
 80a06de:	290a      	cmp	r1, #10
 80a06e0:	d108      	bne.n	80a06f4 <_ZN12Adafruit_GFX5writeEh+0x80>
      cursor_x  = 0;
 80a06e2:	2300      	movs	r3, #0
 80a06e4:	8203      	strh	r3, [r0, #16]
      cursor_y += (int16_t)textsize *
                  (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a06e6:	7a92      	ldrb	r2, [r2, #10]
 80a06e8:	8a43      	ldrh	r3, [r0, #18]
 80a06ea:	7e01      	ldrb	r1, [r0, #24]
 80a06ec:	fb01 3302 	mla	r3, r1, r2, r3
 80a06f0:	8243      	strh	r3, [r0, #18]
 80a06f2:	e037      	b.n	80a0764 <_ZN12Adafruit_GFX5writeEh+0xf0>
    } else if(c != '\r') {
 80a06f4:	290d      	cmp	r1, #13
 80a06f6:	d035      	beq.n	80a0764 <_ZN12Adafruit_GFX5writeEh+0xf0>
      uint8_t first = pgm_read_byte(&gfxFont->first);
 80a06f8:	7a15      	ldrb	r5, [r2, #8]
      if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 80a06fa:	42a9      	cmp	r1, r5
 80a06fc:	d332      	bcc.n	80a0764 <_ZN12Adafruit_GFX5writeEh+0xf0>
 80a06fe:	7a51      	ldrb	r1, [r2, #9]
 80a0700:	4299      	cmp	r1, r3
 80a0702:	d32f      	bcc.n	80a0764 <_ZN12Adafruit_GFX5writeEh+0xf0>
        uint8_t   c2    = c - pgm_read_byte(&gfxFont->first);
        GFXglyph *glyph = &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c2]);
 80a0704:	6851      	ldr	r1, [r2, #4]
 80a0706:	1b5d      	subs	r5, r3, r5
 80a0708:	b2ed      	uxtb	r5, r5
 80a070a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
        uint8_t   w     = pgm_read_byte(&glyph->width),
 80a070e:	78a9      	ldrb	r1, [r5, #2]
                  h     = pgm_read_byte(&glyph->height);
        if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 80a0710:	b311      	cbz	r1, 80a0758 <_ZN12Adafruit_GFX5writeEh+0xe4>
 80a0712:	78e8      	ldrb	r0, [r5, #3]
 80a0714:	b300      	cbz	r0, 80a0758 <_ZN12Adafruit_GFX5writeEh+0xe4>
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
          if(wrap && ((cursor_x + textsize * (xo + w)) >= _width)) {
 80a0716:	7ea6      	ldrb	r6, [r4, #26]
 80a0718:	7e20      	ldrb	r0, [r4, #24]
 80a071a:	b18e      	cbz	r6, 80a0740 <_ZN12Adafruit_GFX5writeEh+0xcc>
 80a071c:	f995 6005 	ldrsb.w	r6, [r5, #5]
 80a0720:	4431      	add	r1, r6
 80a0722:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 80a0726:	fb00 6101 	mla	r1, r0, r1, r6
 80a072a:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80a072e:	42b1      	cmp	r1, r6
 80a0730:	db06      	blt.n	80a0740 <_ZN12Adafruit_GFX5writeEh+0xcc>
            // Drawing character would go off right edge; wrap to new line
            cursor_x  = 0;
 80a0732:	2100      	movs	r1, #0
 80a0734:	8221      	strh	r1, [r4, #16]
            cursor_y += (int16_t)textsize *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 80a0736:	7a92      	ldrb	r2, [r2, #10]
 80a0738:	8a61      	ldrh	r1, [r4, #18]
 80a073a:	fb02 1200 	mla	r2, r2, r0, r1
 80a073e:	8262      	strh	r2, [r4, #18]
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0740:	9002      	str	r0, [sp, #8]
 80a0742:	8ae0      	ldrh	r0, [r4, #22]
 80a0744:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80a0748:	9001      	str	r0, [sp, #4]
 80a074a:	8aa0      	ldrh	r0, [r4, #20]
 80a074c:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80a0750:	9000      	str	r0, [sp, #0]
 80a0752:	4620      	mov	r0, r4
 80a0754:	f7ff fe6e 	bl	80a0434 <_ZN12Adafruit_GFX8drawCharEsshtth>
        }
        cursor_x += pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize;
 80a0758:	7929      	ldrb	r1, [r5, #4]
 80a075a:	7e22      	ldrb	r2, [r4, #24]
 80a075c:	8a23      	ldrh	r3, [r4, #16]
 80a075e:	fb01 3302 	mla	r3, r1, r2, r3
 80a0762:	8223      	strh	r3, [r4, #16]

  }
#if ARDUINO >= 100
  return 1;
#endif
}
 80a0764:	2001      	movs	r0, #1
 80a0766:	b004      	add	sp, #16
 80a0768:	bd70      	pop	{r4, r5, r6, pc}

080a076a <_ZNK12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) const {
  return rotation;
}
 80a076a:	7e40      	ldrb	r0, [r0, #25]
 80a076c:	4770      	bx	lr

080a076e <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a076e:	f000 b8ef 	b.w	80a0950 <HAL_Pin_Map>

080a0772 <_ZN18Adafruit_8x8matrix9drawPixelEsst>:
/******************************* 8x8 MATRIX OBJECT */

Adafruit_8x8matrix::Adafruit_8x8matrix(void) : Adafruit_GFX(8, 8) {
}

void Adafruit_8x8matrix::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0772:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if ((y < 0) || (y >= 8)) return;
 80a0776:	fa1f f882 	uxth.w	r8, r2
 80a077a:	f1b8 0f07 	cmp.w	r8, #7
/******************************* 8x8 MATRIX OBJECT */

Adafruit_8x8matrix::Adafruit_8x8matrix(void) : Adafruit_GFX(8, 8) {
}

void Adafruit_8x8matrix::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a077e:	4607      	mov	r7, r0
 80a0780:	460d      	mov	r5, r1
 80a0782:	4614      	mov	r4, r2
 80a0784:	4699      	mov	r9, r3
  if ((y < 0) || (y >= 8)) return;
 80a0786:	d82c      	bhi.n	80a07e2 <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x70>
  if ((x < 0) || (x >= 8)) return;
 80a0788:	b28e      	uxth	r6, r1
 80a078a:	2e07      	cmp	r6, #7
 80a078c:	d829      	bhi.n	80a07e2 <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x70>

 // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a078e:	f7ff ffec 	bl	80a076a <_ZNK12Adafruit_GFX11getRotationEv>
 80a0792:	2802      	cmp	r0, #2
 80a0794:	d009      	beq.n	80a07aa <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x38>
 80a0796:	2803      	cmp	r0, #3
 80a0798:	d00e      	beq.n	80a07b8 <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x46>
 80a079a:	2801      	cmp	r0, #1
 80a079c:	d110      	bne.n	80a07c0 <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x4e>
  case 1:
    _swap_int16_t(x, y);
    x = 8 - x - 1;
 80a079e:	f1c8 0807 	rsb	r8, r8, #7
    break;
 80a07a2:	462c      	mov	r4, r5

 // check rotation, move pixel around if necessary
  switch (getRotation()) {
  case 1:
    _swap_int16_t(x, y);
    x = 8 - x - 1;
 80a07a4:	fa0f f588 	sxth.w	r5, r8
    break;
 80a07a8:	e00a      	b.n	80a07c0 <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x4e>
  case 2:
    x = 8 - x - 1;
 80a07aa:	f1c6 0507 	rsb	r5, r6, #7
    y = 8 - y - 1;
 80a07ae:	f1c8 0407 	rsb	r4, r8, #7
  case 1:
    _swap_int16_t(x, y);
    x = 8 - x - 1;
    break;
  case 2:
    x = 8 - x - 1;
 80a07b2:	b22d      	sxth	r5, r5
    y = 8 - y - 1;
 80a07b4:	b224      	sxth	r4, r4
    break;
 80a07b6:	e003      	b.n	80a07c0 <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x4e>
  case 3:
    _swap_int16_t(x, y);
    y = 8 - y - 1;
 80a07b8:	f1c6 0607 	rsb	r6, r6, #7
    break;
 80a07bc:	4625      	mov	r5, r4
    x = 8 - x - 1;
    y = 8 - y - 1;
    break;
  case 3:
    _swap_int16_t(x, y);
    y = 8 - y - 1;
 80a07be:	b234      	sxth	r4, r6
    break;
  }

  // wrap around the x
  x += 7;
 80a07c0:	3507      	adds	r5, #7
 80a07c2:	0064      	lsls	r4, r4, #1
 80a07c4:	2301      	movs	r3, #1
  x %= 8;
 80a07c6:	f005 0507 	and.w	r5, r5, #7
 80a07ca:	443c      	add	r4, r7


  if (color) {
    displaybuffer[y] |= 1 << x;
 80a07cc:	fa03 f505 	lsl.w	r5, r3, r5
 80a07d0:	8c23      	ldrh	r3, [r4, #32]
  // wrap around the x
  x += 7;
  x %= 8;


  if (color) {
 80a07d2:	f1b9 0f00 	cmp.w	r9, #0
 80a07d6:	d001      	beq.n	80a07dc <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x6a>
    displaybuffer[y] |= 1 << x;
 80a07d8:	431d      	orrs	r5, r3
 80a07da:	e001      	b.n	80a07e0 <_ZN18Adafruit_8x8matrix9drawPixelEsst+0x6e>
  } else {
    displaybuffer[y] &= ~(1 << x);
 80a07dc:	ea23 0505 	bic.w	r5, r3, r5
 80a07e0:	8425      	strh	r5, [r4, #32]
 80a07e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a07e6 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a07e6:	6803      	ldr	r3, [r0, #0]
 80a07e8:	b2c9      	uxtb	r1, r1
 80a07ea:	689b      	ldr	r3, [r3, #8]
 80a07ec:	4718      	bx	r3

080a07ee <_ZN20Adafruit_LEDBackpack13setBrightnessEh>:
0b0010010010001001, // }
0b0000010100100000, // ~
0b0011111111111111,

};
void Adafruit_LEDBackpack::setBrightness(uint8_t b) {
 80a07ee:	b538      	push	{r3, r4, r5, lr}
 80a07f0:	4605      	mov	r5, r0
 80a07f2:	460c      	mov	r4, r1
  if (b > 15) b = 15;
  Wire.beginTransmission(i2c_addr);
 80a07f4:	f000 ff12 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a07f8:	7c29      	ldrb	r1, [r5, #16]
 80a07fa:	f000 fa9f 	bl	80a0d3c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(HT16K33_CMD_BRIGHTNESS | b);
 80a07fe:	f000 ff0d 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a0802:	4621      	mov	r1, r4
 80a0804:	2c0f      	cmp	r4, #15
 80a0806:	bf28      	it	cs
 80a0808:	210f      	movcs	r1, #15
 80a080a:	f041 01e0 	orr.w	r1, r1, #224	; 0xe0
 80a080e:	f7ff ffea 	bl	80a07e6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
 80a0812:	f000 ff03 	bl	80a161c <_Z19__fetch_global_Wirev>
}
 80a0816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
};
void Adafruit_LEDBackpack::setBrightness(uint8_t b) {
  if (b > 15) b = 15;
  Wire.beginTransmission(i2c_addr);
  Wire.write(HT16K33_CMD_BRIGHTNESS | b);
  Wire.endTransmission();  
 80a081a:	f000 ba97 	b.w	80a0d4c <_ZN7TwoWire15endTransmissionEv>

080a081e <_ZN20Adafruit_LEDBackpack9blinkRateEh>:
}

void Adafruit_LEDBackpack::blinkRate(uint8_t b) {
 80a081e:	b538      	push	{r3, r4, r5, lr}
 80a0820:	4605      	mov	r5, r0
 80a0822:	460c      	mov	r4, r1
  Wire.beginTransmission(i2c_addr);
 80a0824:	f000 fefa 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a0828:	7c29      	ldrb	r1, [r5, #16]
 80a082a:	f000 fa87 	bl	80a0d3c <_ZN7TwoWire17beginTransmissionEh>
  if (b > 3) b = 0; // turn off if not sure
 80a082e:	2c04      	cmp	r4, #4
 80a0830:	bf28      	it	cs
 80a0832:	2400      	movcs	r4, #0
  
  Wire.write(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1)); 
 80a0834:	f000 fef2 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a0838:	0061      	lsls	r1, r4, #1
 80a083a:	f041 0181 	orr.w	r1, r1, #129	; 0x81
 80a083e:	f7ff ffd2 	bl	80a07e6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a0842:	f000 feeb 	bl	80a161c <_Z19__fetch_global_Wirev>
}
 80a0846:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void Adafruit_LEDBackpack::blinkRate(uint8_t b) {
  Wire.beginTransmission(i2c_addr);
  if (b > 3) b = 0; // turn off if not sure
  
  Wire.write(HT16K33_BLINK_CMD | HT16K33_BLINK_DISPLAYON | (b << 1)); 
  Wire.endTransmission();
 80a084a:	f000 ba7f 	b.w	80a0d4c <_ZN7TwoWire15endTransmissionEv>

080a084e <_ZN20Adafruit_LEDBackpack5beginEh>:
}

Adafruit_LEDBackpack::Adafruit_LEDBackpack(void) {
}

void Adafruit_LEDBackpack::begin(uint8_t _addr = 0x70) {
 80a084e:	b510      	push	{r4, lr}
 80a0850:	4604      	mov	r4, r0
  i2c_addr = _addr;
 80a0852:	7401      	strb	r1, [r0, #16]

  Wire.begin();
 80a0854:	f000 fee2 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a0858:	f000 fa6a 	bl	80a0d30 <_ZN7TwoWire5beginEv>

  Wire.beginTransmission(i2c_addr);
 80a085c:	f000 fede 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a0860:	7c21      	ldrb	r1, [r4, #16]
 80a0862:	f000 fa6b 	bl	80a0d3c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(0x21);  // turn on oscillator
 80a0866:	f000 fed9 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a086a:	2121      	movs	r1, #33	; 0x21
 80a086c:	f7ff ffbb 	bl	80a07e6 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a0870:	f000 fed4 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a0874:	f000 fa6a 	bl	80a0d4c <_ZN7TwoWire15endTransmissionEv>
  blinkRate(HT16K33_BLINK_OFF);
 80a0878:	4620      	mov	r0, r4
 80a087a:	2100      	movs	r1, #0
 80a087c:	f7ff ffcf 	bl	80a081e <_ZN20Adafruit_LEDBackpack9blinkRateEh>
  
  setBrightness(15); // max brightness
 80a0880:	4620      	mov	r0, r4
}
 80a0882:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.beginTransmission(i2c_addr);
  Wire.write(0x21);  // turn on oscillator
  Wire.endTransmission();
  blinkRate(HT16K33_BLINK_OFF);
  
  setBrightness(15); // max brightness
 80a0886:	210f      	movs	r1, #15
 80a0888:	f7ff bfb1 	b.w	80a07ee <_ZN20Adafruit_LEDBackpack13setBrightnessEh>

080a088c <_ZN20Adafruit_LEDBackpack12writeDisplayEv>:
}

void Adafruit_LEDBackpack::writeDisplay(void) {
 80a088c:	b538      	push	{r3, r4, r5, lr}
 80a088e:	4604      	mov	r4, r0
  Wire.beginTransmission(i2c_addr);
 80a0890:	f000 fec4 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a0894:	7c21      	ldrb	r1, [r4, #16]
 80a0896:	f000 fa51 	bl	80a0d3c <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)0x00); // start at address $00
 80a089a:	f000 febf 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a089e:	6803      	ldr	r3, [r0, #0]
 80a08a0:	2100      	movs	r1, #0
 80a08a2:	689b      	ldr	r3, [r3, #8]
 80a08a4:	4798      	blx	r3
 80a08a6:	1ea5      	subs	r5, r4, #2
 80a08a8:	340e      	adds	r4, #14

  for (uint8_t i=0; i<8; i++) {
    Wire.write(displaybuffer[i] & 0xFF);    
 80a08aa:	f000 feb7 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a08ae:	f835 1f02 	ldrh.w	r1, [r5, #2]!
 80a08b2:	b2c9      	uxtb	r1, r1
 80a08b4:	f7ff ff97 	bl	80a07e6 <_ZN7TwoWire5writeEi>
    Wire.write(displaybuffer[i] >> 8);    
 80a08b8:	f000 feb0 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a08bc:	8829      	ldrh	r1, [r5, #0]
 80a08be:	0a09      	lsrs	r1, r1, #8
 80a08c0:	f7ff ff91 	bl	80a07e6 <_ZN7TwoWire5writeEi>

void Adafruit_LEDBackpack::writeDisplay(void) {
  Wire.beginTransmission(i2c_addr);
  Wire.write((uint8_t)0x00); // start at address $00

  for (uint8_t i=0; i<8; i++) {
 80a08c4:	42a5      	cmp	r5, r4
 80a08c6:	d1f0      	bne.n	80a08aa <_ZN20Adafruit_LEDBackpack12writeDisplayEv+0x1e>
    Wire.write(displaybuffer[i] & 0xFF);    
    Wire.write(displaybuffer[i] >> 8);    
  }
  Wire.endTransmission();  
 80a08c8:	f000 fea8 	bl	80a161c <_Z19__fetch_global_Wirev>
}
 80a08cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  for (uint8_t i=0; i<8; i++) {
    Wire.write(displaybuffer[i] & 0xFF);    
    Wire.write(displaybuffer[i] >> 8);    
  }
  Wire.endTransmission();  
 80a08d0:	f000 ba3c 	b.w	80a0d4c <_ZN7TwoWire15endTransmissionEv>

080a08d4 <_ZN20Adafruit_LEDBackpack5clearEv>:
}

void Adafruit_LEDBackpack::clear(void) {
 80a08d4:	1e83      	subs	r3, r0, #2
  for (uint8_t i=0; i<8; i++) {
    displaybuffer[i] = 0;
 80a08d6:	2200      	movs	r2, #0
 80a08d8:	300e      	adds	r0, #14
 80a08da:	f823 2f02 	strh.w	r2, [r3, #2]!
  }
  Wire.endTransmission();  
}

void Adafruit_LEDBackpack::clear(void) {
  for (uint8_t i=0; i<8; i++) {
 80a08de:	4283      	cmp	r3, r0
 80a08e0:	d1fb      	bne.n	80a08da <_ZN20Adafruit_LEDBackpack5clearEv+0x6>
    displaybuffer[i] = 0;
  }
}
 80a08e2:	4770      	bx	lr

080a08e4 <_ZN18Adafruit_8x8matrixC1Ev>:
  }
}

/******************************* 8x8 MATRIX OBJECT */

Adafruit_8x8matrix::Adafruit_8x8matrix(void) : Adafruit_GFX(8, 8) {
 80a08e4:	b510      	push	{r4, lr}
 80a08e6:	4604      	mov	r4, r0
 80a08e8:	2208      	movs	r2, #8
 80a08ea:	4611      	mov	r1, r2
 80a08ec:	f7ff fd8a 	bl	80a0404 <_ZN12Adafruit_GFXC1Ess>
 80a08f0:	4b01      	ldr	r3, [pc, #4]	; (80a08f8 <_ZN18Adafruit_8x8matrixC1Ev+0x14>)
}
 80a08f2:	4620      	mov	r0, r4
  }
}

/******************************* 8x8 MATRIX OBJECT */

Adafruit_8x8matrix::Adafruit_8x8matrix(void) : Adafruit_GFX(8, 8) {
 80a08f4:	6023      	str	r3, [r4, #0]
}
 80a08f6:	bd10      	pop	{r4, pc}
 80a08f8:	080a24ac 	.word	0x080a24ac

080a08fc <_GLOBAL__sub_I__ZN20Adafruit_LEDBackpack13setBrightnessEh>:
 80a08fc:	f000 b828 	b.w	80a0950 <HAL_Pin_Map>

080a0900 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0900:	b508      	push	{r3, lr}
 80a0902:	4b02      	ldr	r3, [pc, #8]	; (80a090c <os_mutex_recursive_create+0xc>)
 80a0904:	681b      	ldr	r3, [r3, #0]
 80a0906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0908:	9301      	str	r3, [sp, #4]
 80a090a:	bd08      	pop	{r3, pc}
 80a090c:	080601d0 	.word	0x080601d0

080a0910 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0910:	b508      	push	{r3, lr}
 80a0912:	4b02      	ldr	r3, [pc, #8]	; (80a091c <os_mutex_recursive_destroy+0xc>)
 80a0914:	681b      	ldr	r3, [r3, #0]
 80a0916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0918:	9301      	str	r3, [sp, #4]
 80a091a:	bd08      	pop	{r3, pc}
 80a091c:	080601d0 	.word	0x080601d0

080a0920 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0920:	b508      	push	{r3, lr}
 80a0922:	4b02      	ldr	r3, [pc, #8]	; (80a092c <HAL_RNG_GetRandomNumber+0xc>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	685b      	ldr	r3, [r3, #4]
 80a0928:	9301      	str	r3, [sp, #4]
 80a092a:	bd08      	pop	{r3, pc}
 80a092c:	0806019c 	.word	0x0806019c

080a0930 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0930:	b508      	push	{r3, lr}
 80a0932:	4b02      	ldr	r3, [pc, #8]	; (80a093c <HAL_Delay_Microseconds+0xc>)
 80a0934:	681b      	ldr	r3, [r3, #0]
 80a0936:	68db      	ldr	r3, [r3, #12]
 80a0938:	9301      	str	r3, [sp, #4]
 80a093a:	bd08      	pop	{r3, pc}
 80a093c:	0806019c 	.word	0x0806019c

080a0940 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0940:	b508      	push	{r3, lr}
 80a0942:	4b02      	ldr	r3, [pc, #8]	; (80a094c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0944:	681b      	ldr	r3, [r3, #0]
 80a0946:	695b      	ldr	r3, [r3, #20]
 80a0948:	9301      	str	r3, [sp, #4]
 80a094a:	bd08      	pop	{r3, pc}
 80a094c:	0806019c 	.word	0x0806019c

080a0950 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0950:	b508      	push	{r3, lr}
 80a0952:	4b02      	ldr	r3, [pc, #8]	; (80a095c <HAL_Pin_Map+0xc>)
 80a0954:	681b      	ldr	r3, [r3, #0]
 80a0956:	681b      	ldr	r3, [r3, #0]
 80a0958:	9301      	str	r3, [sp, #4]
 80a095a:	bd08      	pop	{r3, pc}
 80a095c:	080601b0 	.word	0x080601b0

080a0960 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <HAL_Validate_Pin_Function+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	685b      	ldr	r3, [r3, #4]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601b0 	.word	0x080601b0

080a0970 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <HAL_Pin_Mode+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	689b      	ldr	r3, [r3, #8]
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601b0 	.word	0x080601b0

080a0980 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <HAL_Get_Pin_Mode+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	68db      	ldr	r3, [r3, #12]
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601b0 	.word	0x080601b0

080a0990 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <HAL_GPIO_Read+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	695b      	ldr	r3, [r3, #20]
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601b0 	.word	0x080601b0

080a09a0 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <HAL_ADC_Read+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601b0 	.word	0x080601b0

080a09b0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <HAL_I2C_Begin+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601ac 	.word	0x080601ac

080a09c0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <HAL_I2C_Begin_Transmission+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601ac 	.word	0x080601ac

080a09d0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <HAL_I2C_End_Transmission+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601ac 	.word	0x080601ac

080a09e0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <HAL_I2C_Write_Data+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601ac 	.word	0x080601ac

080a09f0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <HAL_I2C_Available_Data+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601ac 	.word	0x080601ac

080a0a00 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <HAL_I2C_Read_Data+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601ac 	.word	0x080601ac

080a0a10 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <HAL_I2C_Peek_Data+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601ac 	.word	0x080601ac

080a0a20 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <HAL_I2C_Flush_Data+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601ac 	.word	0x080601ac

080a0a30 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <HAL_I2C_Is_Enabled+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601ac 	.word	0x080601ac

080a0a40 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b03      	ldr	r3, [pc, #12]	; (80a0a50 <HAL_I2C_Init+0x10>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0a4a:	9301      	str	r3, [sp, #4]
 80a0a4c:	bd08      	pop	{r3, pc}
 80a0a4e:	0000      	.short	0x0000
 80a0a50:	080601ac 	.word	0x080601ac

080a0a54 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0a54:	b508      	push	{r3, lr}
 80a0a56:	4b02      	ldr	r3, [pc, #8]	; (80a0a60 <HAL_SPI_Init+0xc>)
 80a0a58:	681b      	ldr	r3, [r3, #0]
 80a0a5a:	69db      	ldr	r3, [r3, #28]
 80a0a5c:	9301      	str	r3, [sp, #4]
 80a0a5e:	bd08      	pop	{r3, pc}
 80a0a60:	080601b4 	.word	0x080601b4

080a0a64 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0a64:	b508      	push	{r3, lr}
 80a0a66:	4b02      	ldr	r3, [pc, #8]	; (80a0a70 <HAL_SPI_Is_Enabled+0xc>)
 80a0a68:	681b      	ldr	r3, [r3, #0]
 80a0a6a:	6a1b      	ldr	r3, [r3, #32]
 80a0a6c:	9301      	str	r3, [sp, #4]
 80a0a6e:	bd08      	pop	{r3, pc}
 80a0a70:	080601b4 	.word	0x080601b4

080a0a74 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0a74:	b508      	push	{r3, lr}
 80a0a76:	4b02      	ldr	r3, [pc, #8]	; (80a0a80 <HAL_USART_Init+0xc>)
 80a0a78:	681b      	ldr	r3, [r3, #0]
 80a0a7a:	699b      	ldr	r3, [r3, #24]
 80a0a7c:	9301      	str	r3, [sp, #4]
 80a0a7e:	bd08      	pop	{r3, pc}
 80a0a80:	080601c4 	.word	0x080601c4

080a0a84 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0a84:	b508      	push	{r3, lr}
 80a0a86:	4b02      	ldr	r3, [pc, #8]	; (80a0a90 <HAL_USART_Write_Data+0xc>)
 80a0a88:	681b      	ldr	r3, [r3, #0]
 80a0a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0a8c:	9301      	str	r3, [sp, #4]
 80a0a8e:	bd08      	pop	{r3, pc}
 80a0a90:	080601c4 	.word	0x080601c4

080a0a94 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0a94:	b508      	push	{r3, lr}
 80a0a96:	4b02      	ldr	r3, [pc, #8]	; (80a0aa0 <HAL_USART_Available_Data+0xc>)
 80a0a98:	681b      	ldr	r3, [r3, #0]
 80a0a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a9c:	9301      	str	r3, [sp, #4]
 80a0a9e:	bd08      	pop	{r3, pc}
 80a0aa0:	080601c4 	.word	0x080601c4

080a0aa4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0aa4:	b508      	push	{r3, lr}
 80a0aa6:	4b02      	ldr	r3, [pc, #8]	; (80a0ab0 <HAL_USART_Read_Data+0xc>)
 80a0aa8:	681b      	ldr	r3, [r3, #0]
 80a0aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0aac:	9301      	str	r3, [sp, #4]
 80a0aae:	bd08      	pop	{r3, pc}
 80a0ab0:	080601c4 	.word	0x080601c4

080a0ab4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0ab4:	b508      	push	{r3, lr}
 80a0ab6:	4b02      	ldr	r3, [pc, #8]	; (80a0ac0 <HAL_USART_Peek_Data+0xc>)
 80a0ab8:	681b      	ldr	r3, [r3, #0]
 80a0aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0abc:	9301      	str	r3, [sp, #4]
 80a0abe:	bd08      	pop	{r3, pc}
 80a0ac0:	080601c4 	.word	0x080601c4

080a0ac4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0ac4:	b508      	push	{r3, lr}
 80a0ac6:	4b02      	ldr	r3, [pc, #8]	; (80a0ad0 <HAL_USART_Flush_Data+0xc>)
 80a0ac8:	681b      	ldr	r3, [r3, #0]
 80a0aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0acc:	9301      	str	r3, [sp, #4]
 80a0ace:	bd08      	pop	{r3, pc}
 80a0ad0:	080601c4 	.word	0x080601c4

080a0ad4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0ad4:	b508      	push	{r3, lr}
 80a0ad6:	4b02      	ldr	r3, [pc, #8]	; (80a0ae0 <HAL_USART_Is_Enabled+0xc>)
 80a0ad8:	681b      	ldr	r3, [r3, #0]
 80a0ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0adc:	9301      	str	r3, [sp, #4]
 80a0ade:	bd08      	pop	{r3, pc}
 80a0ae0:	080601c4 	.word	0x080601c4

080a0ae4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601c4 	.word	0x080601c4

080a0af4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <HAL_USB_USART_Init+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	681b      	ldr	r3, [r3, #0]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	080601d8 	.word	0x080601d8

080a0b04 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <HAL_USB_USART_Begin+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	685b      	ldr	r3, [r3, #4]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	080601d8 	.word	0x080601d8

080a0b14 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <HAL_USB_USART_Available_Data+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	691b      	ldr	r3, [r3, #16]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	080601d8 	.word	0x080601d8

080a0b24 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	695b      	ldr	r3, [r3, #20]
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601d8 	.word	0x080601d8

080a0b34 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <HAL_USB_USART_Receive_Data+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	699b      	ldr	r3, [r3, #24]
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601d8 	.word	0x080601d8

080a0b44 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <HAL_USB_USART_Send_Data+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	69db      	ldr	r3, [r3, #28]
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601d8 	.word	0x080601d8

080a0b54 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <HAL_USB_USART_Flush_Data+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	6a1b      	ldr	r3, [r3, #32]
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601d8 	.word	0x080601d8

080a0b64 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <inet_gethostbyname+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601c0 	.word	0x080601c0

080a0b74 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <panic_+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080201a8 	.word	0x080201a8

080a0b84 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <set_system_mode+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	685b      	ldr	r3, [r3, #4]
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601a4 	.word	0x080601a4

080a0b94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <system_delay_ms+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	695b      	ldr	r3, [r3, #20]
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601a4 	.word	0x080601a4

080a0ba4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b03      	ldr	r3, [pc, #12]	; (80a0bb4 <system_ctrl_set_app_request_handler+0x10>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0bae:	9301      	str	r3, [sp, #4]
 80a0bb0:	bd08      	pop	{r3, pc}
 80a0bb2:	0000      	.short	0x0000
 80a0bb4:	080601a4 	.word	0x080601a4

080a0bb8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0bb8:	b508      	push	{r3, lr}
 80a0bba:	4b03      	ldr	r3, [pc, #12]	; (80a0bc8 <system_ctrl_set_result+0x10>)
 80a0bbc:	681b      	ldr	r3, [r3, #0]
 80a0bbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0bc2:	9301      	str	r3, [sp, #4]
 80a0bc4:	bd08      	pop	{r3, pc}
 80a0bc6:	0000      	.short	0x0000
 80a0bc8:	080601a4 	.word	0x080601a4

080a0bcc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0bcc:	b508      	push	{r3, lr}
 80a0bce:	4b02      	ldr	r3, [pc, #8]	; (80a0bd8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0bd0:	681b      	ldr	r3, [r3, #0]
 80a0bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0bd4:	9301      	str	r3, [sp, #4]
 80a0bd6:	bd08      	pop	{r3, pc}
 80a0bd8:	080601cc 	.word	0x080601cc

080a0bdc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0bdc:	b508      	push	{r3, lr}
 80a0bde:	4b02      	ldr	r3, [pc, #8]	; (80a0be8 <network_connect+0xc>)
 80a0be0:	681b      	ldr	r3, [r3, #0]
 80a0be2:	685b      	ldr	r3, [r3, #4]
 80a0be4:	9301      	str	r3, [sp, #4]
 80a0be6:	bd08      	pop	{r3, pc}
 80a0be8:	080601c8 	.word	0x080601c8

080a0bec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0bec:	b508      	push	{r3, lr}
 80a0bee:	4b02      	ldr	r3, [pc, #8]	; (80a0bf8 <network_connecting+0xc>)
 80a0bf0:	681b      	ldr	r3, [r3, #0]
 80a0bf2:	689b      	ldr	r3, [r3, #8]
 80a0bf4:	9301      	str	r3, [sp, #4]
 80a0bf6:	bd08      	pop	{r3, pc}
 80a0bf8:	080601c8 	.word	0x080601c8

080a0bfc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0bfc:	b508      	push	{r3, lr}
 80a0bfe:	4b02      	ldr	r3, [pc, #8]	; (80a0c08 <network_disconnect+0xc>)
 80a0c00:	681b      	ldr	r3, [r3, #0]
 80a0c02:	68db      	ldr	r3, [r3, #12]
 80a0c04:	9301      	str	r3, [sp, #4]
 80a0c06:	bd08      	pop	{r3, pc}
 80a0c08:	080601c8 	.word	0x080601c8

080a0c0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0c0c:	b508      	push	{r3, lr}
 80a0c0e:	4b02      	ldr	r3, [pc, #8]	; (80a0c18 <network_ready+0xc>)
 80a0c10:	681b      	ldr	r3, [r3, #0]
 80a0c12:	691b      	ldr	r3, [r3, #16]
 80a0c14:	9301      	str	r3, [sp, #4]
 80a0c16:	bd08      	pop	{r3, pc}
 80a0c18:	080601c8 	.word	0x080601c8

080a0c1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0c1c:	b508      	push	{r3, lr}
 80a0c1e:	4b02      	ldr	r3, [pc, #8]	; (80a0c28 <network_on+0xc>)
 80a0c20:	681b      	ldr	r3, [r3, #0]
 80a0c22:	695b      	ldr	r3, [r3, #20]
 80a0c24:	9301      	str	r3, [sp, #4]
 80a0c26:	bd08      	pop	{r3, pc}
 80a0c28:	080601c8 	.word	0x080601c8

080a0c2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0c2c:	b508      	push	{r3, lr}
 80a0c2e:	4b02      	ldr	r3, [pc, #8]	; (80a0c38 <network_off+0xc>)
 80a0c30:	681b      	ldr	r3, [r3, #0]
 80a0c32:	699b      	ldr	r3, [r3, #24]
 80a0c34:	9301      	str	r3, [sp, #4]
 80a0c36:	bd08      	pop	{r3, pc}
 80a0c38:	080601c8 	.word	0x080601c8

080a0c3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0c3c:	b508      	push	{r3, lr}
 80a0c3e:	4b02      	ldr	r3, [pc, #8]	; (80a0c48 <network_listen+0xc>)
 80a0c40:	681b      	ldr	r3, [r3, #0]
 80a0c42:	69db      	ldr	r3, [r3, #28]
 80a0c44:	9301      	str	r3, [sp, #4]
 80a0c46:	bd08      	pop	{r3, pc}
 80a0c48:	080601c8 	.word	0x080601c8

080a0c4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0c4c:	b508      	push	{r3, lr}
 80a0c4e:	4b02      	ldr	r3, [pc, #8]	; (80a0c58 <network_listening+0xc>)
 80a0c50:	681b      	ldr	r3, [r3, #0]
 80a0c52:	6a1b      	ldr	r3, [r3, #32]
 80a0c54:	9301      	str	r3, [sp, #4]
 80a0c56:	bd08      	pop	{r3, pc}
 80a0c58:	080601c8 	.word	0x080601c8

080a0c5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0c5c:	b508      	push	{r3, lr}
 80a0c5e:	4b02      	ldr	r3, [pc, #8]	; (80a0c68 <network_set_listen_timeout+0xc>)
 80a0c60:	681b      	ldr	r3, [r3, #0]
 80a0c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0c64:	9301      	str	r3, [sp, #4]
 80a0c66:	bd08      	pop	{r3, pc}
 80a0c68:	080601c8 	.word	0x080601c8

080a0c6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0c6c:	b508      	push	{r3, lr}
 80a0c6e:	4b02      	ldr	r3, [pc, #8]	; (80a0c78 <network_get_listen_timeout+0xc>)
 80a0c70:	681b      	ldr	r3, [r3, #0]
 80a0c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0c74:	9301      	str	r3, [sp, #4]
 80a0c76:	bd08      	pop	{r3, pc}
 80a0c78:	080601c8 	.word	0x080601c8

080a0c7c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0c7c:	b508      	push	{r3, lr}
 80a0c7e:	4b02      	ldr	r3, [pc, #8]	; (80a0c88 <malloc+0xc>)
 80a0c80:	681b      	ldr	r3, [r3, #0]
 80a0c82:	681b      	ldr	r3, [r3, #0]
 80a0c84:	9301      	str	r3, [sp, #4]
 80a0c86:	bd08      	pop	{r3, pc}
 80a0c88:	080601a0 	.word	0x080601a0

080a0c8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0c8c:	b508      	push	{r3, lr}
 80a0c8e:	4b02      	ldr	r3, [pc, #8]	; (80a0c98 <free+0xc>)
 80a0c90:	681b      	ldr	r3, [r3, #0]
 80a0c92:	685b      	ldr	r3, [r3, #4]
 80a0c94:	9301      	str	r3, [sp, #4]
 80a0c96:	bd08      	pop	{r3, pc}
 80a0c98:	080601a0 	.word	0x080601a0

080a0c9c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0c9c:	2100      	movs	r1, #0
 80a0c9e:	f7ff bf79 	b.w	80a0b94 <system_delay_ms>

080a0ca2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0ca2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0ca4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0ca6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0ca8:	b113      	cbz	r3, 80a0cb0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0caa:	2203      	movs	r2, #3
 80a0cac:	4601      	mov	r1, r0
 80a0cae:	4798      	blx	r3
    }
 80a0cb0:	4620      	mov	r0, r4
 80a0cb2:	bd10      	pop	{r4, pc}

080a0cb4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0cb4:	4770      	bx	lr

080a0cb6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0cb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cb8:	4606      	mov	r6, r0
 80a0cba:	4615      	mov	r5, r2
 80a0cbc:	460c      	mov	r4, r1
 80a0cbe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0cc0:	42bc      	cmp	r4, r7
 80a0cc2:	d006      	beq.n	80a0cd2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0cc4:	6833      	ldr	r3, [r6, #0]
 80a0cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0cca:	689b      	ldr	r3, [r3, #8]
 80a0ccc:	4630      	mov	r0, r6
 80a0cce:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0cd0:	e7f6      	b.n	80a0cc0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0cd2:	4628      	mov	r0, r5
 80a0cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0cd6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0cd6:	2200      	movs	r2, #0
 80a0cd8:	7c00      	ldrb	r0, [r0, #16]
 80a0cda:	f7ff be81 	b.w	80a09e0 <HAL_I2C_Write_Data>

080a0cde <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0cde:	2100      	movs	r1, #0
 80a0ce0:	7c00      	ldrb	r0, [r0, #16]
 80a0ce2:	f7ff be85 	b.w	80a09f0 <HAL_I2C_Available_Data>

080a0ce6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0ce6:	2100      	movs	r1, #0
 80a0ce8:	7c00      	ldrb	r0, [r0, #16]
 80a0cea:	f7ff be89 	b.w	80a0a00 <HAL_I2C_Read_Data>

080a0cee <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0cee:	2100      	movs	r1, #0
 80a0cf0:	7c00      	ldrb	r0, [r0, #16]
 80a0cf2:	f7ff be8d 	b.w	80a0a10 <HAL_I2C_Peek_Data>

080a0cf6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0cf6:	2100      	movs	r1, #0
 80a0cf8:	7c00      	ldrb	r0, [r0, #16]
 80a0cfa:	f7ff be91 	b.w	80a0a20 <HAL_I2C_Flush_Data>

080a0cfe <_ZN7TwoWireD0Ev>:
 80a0cfe:	b510      	push	{r4, lr}
 80a0d00:	4604      	mov	r4, r0
 80a0d02:	2114      	movs	r1, #20
 80a0d04:	f000 fced 	bl	80a16e2 <_ZdlPvj>
 80a0d08:	4620      	mov	r0, r4
 80a0d0a:	bd10      	pop	{r4, pc}

080a0d0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0d0c:	b510      	push	{r4, lr}
 80a0d0e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0d10:	2300      	movs	r3, #0
 80a0d12:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a0d14:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0d18:	60a3      	str	r3, [r4, #8]
 80a0d1a:	4b04      	ldr	r3, [pc, #16]	; (80a0d2c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0d1c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0d1e:	4608      	mov	r0, r1
 80a0d20:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0d22:	4611      	mov	r1, r2
 80a0d24:	f7ff fe8c 	bl	80a0a40 <HAL_I2C_Init>
}
 80a0d28:	4620      	mov	r0, r4
 80a0d2a:	bd10      	pop	{r4, pc}
 80a0d2c:	080a24e4 	.word	0x080a24e4

080a0d30 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a0d30:	2300      	movs	r3, #0
 80a0d32:	461a      	mov	r2, r3
 80a0d34:	4619      	mov	r1, r3
 80a0d36:	7c00      	ldrb	r0, [r0, #16]
 80a0d38:	f7ff be3a 	b.w	80a09b0 <HAL_I2C_Begin>

080a0d3c <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a0d3c:	2200      	movs	r2, #0
 80a0d3e:	7c00      	ldrb	r0, [r0, #16]
 80a0d40:	f7ff be3e 	b.w	80a09c0 <HAL_I2C_Begin_Transmission>

080a0d44 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a0d44:	2200      	movs	r2, #0
 80a0d46:	7c00      	ldrb	r0, [r0, #16]
 80a0d48:	f7ff be42 	b.w	80a09d0 <HAL_I2C_End_Transmission>

080a0d4c <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a0d4c:	2101      	movs	r1, #1
 80a0d4e:	f7ff bff9 	b.w	80a0d44 <_ZN7TwoWire15endTransmissionEh>

080a0d52 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0d52:	2100      	movs	r1, #0
 80a0d54:	7c00      	ldrb	r0, [r0, #16]
 80a0d56:	f7ff be6b 	b.w	80a0a30 <HAL_I2C_Is_Enabled>

080a0d5a <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0d5a:	4770      	bx	lr

080a0d5c <_ZN9IPAddressD0Ev>:
 80a0d5c:	b510      	push	{r4, lr}
 80a0d5e:	4604      	mov	r4, r0
 80a0d60:	2118      	movs	r1, #24
 80a0d62:	f000 fcbe 	bl	80a16e2 <_ZdlPvj>
 80a0d66:	4620      	mov	r0, r4
 80a0d68:	bd10      	pop	{r4, pc}

080a0d6a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0d6c:	460f      	mov	r7, r1
 80a0d6e:	f100 0608 	add.w	r6, r0, #8
 80a0d72:	1d05      	adds	r5, r0, #4
 80a0d74:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a0d76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0d7a:	220a      	movs	r2, #10
 80a0d7c:	4638      	mov	r0, r7
 80a0d7e:	f000 f8f2 	bl	80a0f66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d82:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a0d84:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0d86:	d007      	beq.n	80a0d98 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a0d88:	2c00      	cmp	r4, #0
 80a0d8a:	d0f4      	beq.n	80a0d76 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0d8c:	212e      	movs	r1, #46	; 0x2e
 80a0d8e:	4638      	mov	r0, r7
 80a0d90:	f000 f8da 	bl	80a0f48 <_ZN5Print5printEc>
 80a0d94:	4404      	add	r4, r0
 80a0d96:	e7ee      	b.n	80a0d76 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a0d98:	4620      	mov	r0, r4
 80a0d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0d9c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0d9c:	b510      	push	{r4, lr}
 80a0d9e:	4604      	mov	r4, r0
 80a0da0:	4b04      	ldr	r3, [pc, #16]	; (80a0db4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a0da2:	2211      	movs	r2, #17
 80a0da4:	f840 3b04 	str.w	r3, [r0], #4
 80a0da8:	2100      	movs	r1, #0
 80a0daa:	f001 f89c 	bl	80a1ee6 <memset>
{
    clear();
}
 80a0dae:	4620      	mov	r0, r4
 80a0db0:	bd10      	pop	{r4, pc}
 80a0db2:	bf00      	nop
 80a0db4:	080a250c 	.word	0x080a250c

080a0db8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a0db8:	4603      	mov	r3, r0
 80a0dba:	4a07      	ldr	r2, [pc, #28]	; (80a0dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a0dbc:	b510      	push	{r4, lr}
 80a0dbe:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a0dc2:	f101 0210 	add.w	r2, r1, #16
 80a0dc6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a0dca:	4291      	cmp	r1, r2
 80a0dcc:	f843 4b04 	str.w	r4, [r3], #4
 80a0dd0:	d1f9      	bne.n	80a0dc6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a0dd2:	780a      	ldrb	r2, [r1, #0]
 80a0dd4:	701a      	strb	r2, [r3, #0]
}
 80a0dd6:	bd10      	pop	{r4, pc}
 80a0dd8:	080a250c 	.word	0x080a250c

080a0ddc <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0ddc:	4a02      	ldr	r2, [pc, #8]	; (80a0de8 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a0dde:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a0de0:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a0de2:	2204      	movs	r2, #4
 80a0de4:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a0de6:	4770      	bx	lr
 80a0de8:	080a250c 	.word	0x080a250c

080a0dec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a0dec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a0dee:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a0df2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a0df6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a0dfa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a0dfe:	2304      	movs	r3, #4
 80a0e00:	6041      	str	r1, [r0, #4]
 80a0e02:	7503      	strb	r3, [r0, #20]
 80a0e04:	bd10      	pop	{r4, pc}
	...

080a0e08 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0e08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0e0a:	4d04      	ldr	r5, [pc, #16]	; (80a0e1c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0e0c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0e0e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a0e12:	9500      	str	r5, [sp, #0]
 80a0e14:	f7ff ffea 	bl	80a0dec <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0e18:	b003      	add	sp, #12
 80a0e1a:	bd30      	pop	{r4, r5, pc}
 80a0e1c:	080a250c 	.word	0x080a250c

080a0e20 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a0e20:	4a01      	ldr	r2, [pc, #4]	; (80a0e28 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a0e24:	601a      	str	r2, [r3, #0]
 80a0e26:	4770      	bx	lr
 80a0e28:	080a258e 	.word	0x080a258e
 80a0e2c:	200000b4 	.word	0x200000b4

080a0e30 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0e30:	2300      	movs	r3, #0
 80a0e32:	461a      	mov	r2, r3
 80a0e34:	6840      	ldr	r0, [r0, #4]
 80a0e36:	f7ff bed1 	b.w	80a0bdc <network_connect>

080a0e3a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0e3a:	2200      	movs	r2, #0
 80a0e3c:	2102      	movs	r1, #2
 80a0e3e:	6840      	ldr	r0, [r0, #4]
 80a0e40:	f7ff bedc 	b.w	80a0bfc <network_disconnect>

080a0e44 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0e44:	2200      	movs	r2, #0
 80a0e46:	4611      	mov	r1, r2
 80a0e48:	6840      	ldr	r0, [r0, #4]
 80a0e4a:	f7ff becf 	b.w	80a0bec <network_connecting>

080a0e4e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0e4e:	2200      	movs	r2, #0
 80a0e50:	4611      	mov	r1, r2
 80a0e52:	6840      	ldr	r0, [r0, #4]
 80a0e54:	f7ff beda 	b.w	80a0c0c <network_ready>

080a0e58 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0e58:	2300      	movs	r3, #0
 80a0e5a:	461a      	mov	r2, r3
 80a0e5c:	4619      	mov	r1, r3
 80a0e5e:	6840      	ldr	r0, [r0, #4]
 80a0e60:	f7ff bedc 	b.w	80a0c1c <network_on>

080a0e64 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0e64:	2300      	movs	r3, #0
 80a0e66:	461a      	mov	r2, r3
 80a0e68:	4619      	mov	r1, r3
 80a0e6a:	6840      	ldr	r0, [r0, #4]
 80a0e6c:	f7ff bede 	b.w	80a0c2c <network_off>

080a0e70 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0e70:	2200      	movs	r2, #0
 80a0e72:	f081 0101 	eor.w	r1, r1, #1
 80a0e76:	6840      	ldr	r0, [r0, #4]
 80a0e78:	f7ff bee0 	b.w	80a0c3c <network_listen>

080a0e7c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0e7c:	2200      	movs	r2, #0
 80a0e7e:	6840      	ldr	r0, [r0, #4]
 80a0e80:	f7ff beec 	b.w	80a0c5c <network_set_listen_timeout>

080a0e84 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0e84:	2200      	movs	r2, #0
 80a0e86:	4611      	mov	r1, r2
 80a0e88:	6840      	ldr	r0, [r0, #4]
 80a0e8a:	f7ff beef 	b.w	80a0c6c <network_get_listen_timeout>

080a0e8e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0e8e:	2200      	movs	r2, #0
 80a0e90:	4611      	mov	r1, r2
 80a0e92:	6840      	ldr	r0, [r0, #4]
 80a0e94:	f7ff beda 	b.w	80a0c4c <network_listening>

080a0e98 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0e98:	b570      	push	{r4, r5, r6, lr}
 80a0e9a:	4616      	mov	r6, r2
 80a0e9c:	b08e      	sub	sp, #56	; 0x38
 80a0e9e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0ea0:	a808      	add	r0, sp, #32
 80a0ea2:	f7ff ff7b 	bl	80a0d9c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0ea6:	2211      	movs	r2, #17
 80a0ea8:	2100      	movs	r1, #0
 80a0eaa:	a803      	add	r0, sp, #12
 80a0eac:	f001 f81b 	bl	80a1ee6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0eb0:	4630      	mov	r0, r6
 80a0eb2:	f001 f849 	bl	80a1f48 <strlen>
 80a0eb6:	2500      	movs	r5, #0
 80a0eb8:	4b0a      	ldr	r3, [pc, #40]	; (80a0ee4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0eba:	9500      	str	r5, [sp, #0]
 80a0ebc:	b281      	uxth	r1, r0
 80a0ebe:	685b      	ldr	r3, [r3, #4]
 80a0ec0:	aa03      	add	r2, sp, #12
 80a0ec2:	4630      	mov	r0, r6
 80a0ec4:	f7ff fe4e 	bl	80a0b64 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0ec8:	b120      	cbz	r0, 80a0ed4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0eca:	4629      	mov	r1, r5
 80a0ecc:	4620      	mov	r0, r4
 80a0ece:	f7ff ff85 	bl	80a0ddc <_ZN9IPAddressC1Em>
 80a0ed2:	e003      	b.n	80a0edc <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0ed4:	a903      	add	r1, sp, #12
 80a0ed6:	4620      	mov	r0, r4
 80a0ed8:	f7ff ff6e 	bl	80a0db8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0edc:	4620      	mov	r0, r4
 80a0ede:	b00e      	add	sp, #56	; 0x38
 80a0ee0:	bd70      	pop	{r4, r5, r6, pc}
 80a0ee2:	bf00      	nop
 80a0ee4:	2000053c 	.word	0x2000053c

080a0ee8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0ee8:	4b02      	ldr	r3, [pc, #8]	; (80a0ef4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0eea:	4a03      	ldr	r2, [pc, #12]	; (80a0ef8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0eec:	601a      	str	r2, [r3, #0]
 80a0eee:	2200      	movs	r2, #0
 80a0ef0:	605a      	str	r2, [r3, #4]
 80a0ef2:	4770      	bx	lr
 80a0ef4:	200000b8 	.word	0x200000b8
 80a0ef8:	080a2604 	.word	0x080a2604

080a0efc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a0efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0efe:	4606      	mov	r6, r0
 80a0f00:	460d      	mov	r5, r1
 80a0f02:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0f04:	2400      	movs	r4, #0
  while (size--) {
 80a0f06:	42bd      	cmp	r5, r7
 80a0f08:	d00c      	beq.n	80a0f24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0f0a:	6833      	ldr	r3, [r6, #0]
 80a0f0c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a0f10:	689b      	ldr	r3, [r3, #8]
 80a0f12:	4630      	mov	r0, r6
 80a0f14:	4798      	blx	r3
     if (chunk>=0)
 80a0f16:	2800      	cmp	r0, #0
 80a0f18:	db01      	blt.n	80a0f1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0f1a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a0f1c:	e7f3      	b.n	80a0f06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a0f1e:	2c00      	cmp	r4, #0
 80a0f20:	bf08      	it	eq
 80a0f22:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0f28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0f28:	b570      	push	{r4, r5, r6, lr}
 80a0f2a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a0f2c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a0f2e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a0f30:	b149      	cbz	r1, 80a0f46 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0f32:	f001 f809 	bl	80a1f48 <strlen>
 80a0f36:	682b      	ldr	r3, [r5, #0]
 80a0f38:	4602      	mov	r2, r0
 80a0f3a:	4621      	mov	r1, r4
 80a0f3c:	4628      	mov	r0, r5
    }
 80a0f3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0f42:	68db      	ldr	r3, [r3, #12]
 80a0f44:	4718      	bx	r3
    }
 80a0f46:	bd70      	pop	{r4, r5, r6, pc}

080a0f48 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0f48:	6803      	ldr	r3, [r0, #0]
 80a0f4a:	689b      	ldr	r3, [r3, #8]
 80a0f4c:	4718      	bx	r3

080a0f4e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0f4e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a0f50:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a0f52:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a0f54:	f7ff fff8 	bl	80a0f48 <_ZN5Print5printEc>
  n += print('\n');
 80a0f58:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a0f5a:	4604      	mov	r4, r0
  n += print('\n');
 80a0f5c:	4628      	mov	r0, r5
 80a0f5e:	f7ff fff3 	bl	80a0f48 <_ZN5Print5printEc>
  return n;
}
 80a0f62:	4420      	add	r0, r4
 80a0f64:	bd38      	pop	{r3, r4, r5, pc}

080a0f66 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a0f66:	2a01      	cmp	r2, #1
 80a0f68:	bf98      	it	ls
 80a0f6a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0f6c:	b530      	push	{r4, r5, lr}
 80a0f6e:	460b      	mov	r3, r1
 80a0f70:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0f72:	2100      	movs	r1, #0
 80a0f74:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a0f78:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0f7c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0f80:	fb05 3312 	mls	r3, r5, r2, r3
 80a0f84:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a0f86:	2b09      	cmp	r3, #9
 80a0f88:	bf94      	ite	ls
 80a0f8a:	3330      	addls	r3, #48	; 0x30
 80a0f8c:	3337      	addhi	r3, #55	; 0x37
 80a0f8e:	b2db      	uxtb	r3, r3
 80a0f90:	4621      	mov	r1, r4
 80a0f92:	f804 3901 	strb.w	r3, [r4], #-1
 80a0f96:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a0f98:	2d00      	cmp	r5, #0
 80a0f9a:	d1ef      	bne.n	80a0f7c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a0f9c:	f7ff ffc4 	bl	80a0f28 <_ZN5Print5writeEPKc>
}
 80a0fa0:	b00b      	add	sp, #44	; 0x2c
 80a0fa2:	bd30      	pop	{r4, r5, pc}

080a0fa4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a0fa4:	b510      	push	{r4, lr}
 80a0fa6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0fa8:	f7ff fe7b 	bl	80a0ca2 <_ZNSt14_Function_baseD1Ev>
 80a0fac:	4620      	mov	r0, r4
 80a0fae:	bd10      	pop	{r4, pc}

080a0fb0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0fb0:	4803      	ldr	r0, [pc, #12]	; (80a0fc0 <_GLOBAL__sub_I_RGB+0x10>)
 80a0fb2:	2300      	movs	r3, #0
 80a0fb4:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0fb6:	4a03      	ldr	r2, [pc, #12]	; (80a0fc4 <_GLOBAL__sub_I_RGB+0x14>)
 80a0fb8:	4903      	ldr	r1, [pc, #12]	; (80a0fc8 <_GLOBAL__sub_I_RGB+0x18>)
 80a0fba:	f000 bb8d 	b.w	80a16d8 <__aeabi_atexit>
 80a0fbe:	bf00      	nop
 80a0fc0:	200000c0 	.word	0x200000c0
 80a0fc4:	20000070 	.word	0x20000070
 80a0fc8:	080a0fa5 	.word	0x080a0fa5

080a0fcc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a0fcc:	b510      	push	{r4, lr}
 80a0fce:	4b04      	ldr	r3, [pc, #16]	; (80a0fe0 <_ZN8SPIClassD1Ev+0x14>)
 80a0fd0:	4604      	mov	r4, r0
 80a0fd2:	6003      	str	r3, [r0, #0]
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0fd4:	68c0      	ldr	r0, [r0, #12]
 80a0fd6:	b108      	cbz	r0, 80a0fdc <_ZN8SPIClassD1Ev+0x10>
            os_mutex_recursive_destroy(handle_);
 80a0fd8:	f7ff fc9a 	bl	80a0910 <os_mutex_recursive_destroy>
 80a0fdc:	4620      	mov	r0, r4
 80a0fde:	bd10      	pop	{r4, pc}
 80a0fe0:	080a2638 	.word	0x080a2638

080a0fe4 <_ZN8SPIClassD0Ev>:
 80a0fe4:	b510      	push	{r4, lr}
 80a0fe6:	4604      	mov	r4, r0
 80a0fe8:	f7ff fff0 	bl	80a0fcc <_ZN8SPIClassD1Ev>
 80a0fec:	4620      	mov	r0, r4
 80a0fee:	2110      	movs	r1, #16
 80a0ff0:	f000 fb77 	bl	80a16e2 <_ZdlPvj>
 80a0ff4:	4620      	mov	r0, r4
 80a0ff6:	bd10      	pop	{r4, pc}

080a0ff8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0ff8:	b570      	push	{r4, r5, r6, lr}
 80a0ffa:	4604      	mov	r4, r0
 80a0ffc:	460e      	mov	r6, r1
 80a0ffe:	4b07      	ldr	r3, [pc, #28]	; (80a101c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a1000:	2500      	movs	r5, #0
 80a1002:	6003      	str	r3, [r0, #0]
 80a1004:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_recursive_create(&handle_);
 80a1008:	f7ff fc7a 	bl	80a0900 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a100c:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a100e:	7126      	strb	r6, [r4, #4]
    HAL_SPI_Init(_spi);
 80a1010:	f7ff fd20 	bl	80a0a54 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a1014:	60a5      	str	r5, [r4, #8]
}
 80a1016:	4620      	mov	r0, r4
 80a1018:	bd70      	pop	{r4, r5, r6, pc}
 80a101a:	bf00      	nop
 80a101c:	080a2638 	.word	0x080a2638

080a1020 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a1020:	7900      	ldrb	r0, [r0, #4]
 80a1022:	f7ff bd1f 	b.w	80a0a64 <HAL_SPI_Is_Enabled>

080a1026 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a1026:	b510      	push	{r4, lr}
 80a1028:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a102a:	6800      	ldr	r0, [r0, #0]
 80a102c:	b118      	cbz	r0, 80a1036 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a102e:	f7ff fe2d 	bl	80a0c8c <free>
            wakeupSource_ = nullptr;
 80a1032:	2300      	movs	r3, #0
 80a1034:	6023      	str	r3, [r4, #0]
 80a1036:	bd10      	pop	{r4, pc}

080a1038 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1038:	b510      	push	{r4, lr}
 80a103a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a103c:	f7ff fff3 	bl	80a1026 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a1040:	4620      	mov	r0, r4
 80a1042:	bd10      	pop	{r4, pc}

080a1044 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1044:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a1048:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a104a:	4c08      	ldr	r4, [pc, #32]	; (80a106c <_GLOBAL__sub_I_System+0x28>)
 80a104c:	2000      	movs	r0, #0
 80a104e:	6020      	str	r0, [r4, #0]
 80a1050:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a1052:	71a0      	strb	r0, [r4, #6]
 80a1054:	8120      	strh	r0, [r4, #8]
 80a1056:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1058:	f7ff fd94 	bl	80a0b84 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a105c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a105e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a1062:	4a03      	ldr	r2, [pc, #12]	; (80a1070 <_GLOBAL__sub_I_System+0x2c>)
 80a1064:	4903      	ldr	r1, [pc, #12]	; (80a1074 <_GLOBAL__sub_I_System+0x30>)
 80a1066:	f000 bb37 	b.w	80a16d8 <__aeabi_atexit>
 80a106a:	bf00      	nop
 80a106c:	200000d0 	.word	0x200000d0
 80a1070:	20000070 	.word	0x20000070
 80a1074:	080a1039 	.word	0x080a1039

080a1078 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1078:	4b02      	ldr	r3, [pc, #8]	; (80a1084 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a107a:	681a      	ldr	r2, [r3, #0]
 80a107c:	4b02      	ldr	r3, [pc, #8]	; (80a1088 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a107e:	601a      	str	r2, [r3, #0]
 80a1080:	4770      	bx	lr
 80a1082:	bf00      	nop
 80a1084:	20000008 	.word	0x20000008
 80a1088:	200000dc 	.word	0x200000dc

080a108c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a108c:	4770      	bx	lr

080a108e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a108e:	7441      	strb	r1, [r0, #17]
 80a1090:	4770      	bx	lr

080a1092 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1092:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1094:	7c00      	ldrb	r0, [r0, #16]
 80a1096:	f7ff fd25 	bl	80a0ae4 <HAL_USART_Available_Data_For_Write>
}
 80a109a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a109e:	bd08      	pop	{r3, pc}

080a10a0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a10a0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a10a2:	7c00      	ldrb	r0, [r0, #16]
 80a10a4:	f7ff fcf6 	bl	80a0a94 <HAL_USART_Available_Data>
}
 80a10a8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a10ac:	bd08      	pop	{r3, pc}

080a10ae <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a10ae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a10b0:	7c00      	ldrb	r0, [r0, #16]
 80a10b2:	f7ff fcff 	bl	80a0ab4 <HAL_USART_Peek_Data>
}
 80a10b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a10ba:	bf28      	it	cs
 80a10bc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a10c0:	bd08      	pop	{r3, pc}

080a10c2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a10c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a10c4:	7c00      	ldrb	r0, [r0, #16]
 80a10c6:	f7ff fced 	bl	80a0aa4 <HAL_USART_Read_Data>
}
 80a10ca:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a10ce:	bf28      	it	cs
 80a10d0:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a10d4:	bd08      	pop	{r3, pc}

080a10d6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a10d6:	7c00      	ldrb	r0, [r0, #16]
 80a10d8:	f7ff bcf4 	b.w	80a0ac4 <HAL_USART_Flush_Data>

080a10dc <_ZN11USARTSerialD0Ev>:
 80a10dc:	b510      	push	{r4, lr}
 80a10de:	4604      	mov	r4, r0
 80a10e0:	2114      	movs	r1, #20
 80a10e2:	f000 fafe 	bl	80a16e2 <_ZdlPvj>
 80a10e6:	4620      	mov	r0, r4
 80a10e8:	bd10      	pop	{r4, pc}

080a10ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a10ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a10ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a10ee:	4604      	mov	r4, r0
 80a10f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a10f2:	b925      	cbnz	r5, 80a10fe <_ZN11USARTSerial5writeEh+0x14>
 80a10f4:	7c00      	ldrb	r0, [r0, #16]
 80a10f6:	f7ff fcf5 	bl	80a0ae4 <HAL_USART_Available_Data_For_Write>
 80a10fa:	2800      	cmp	r0, #0
 80a10fc:	dd05      	ble.n	80a110a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a10fe:	4631      	mov	r1, r6
 80a1100:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1102:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1106:	f7ff bcbd 	b.w	80a0a84 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a110a:	4628      	mov	r0, r5
 80a110c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1110 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1110:	b510      	push	{r4, lr}
 80a1112:	4604      	mov	r4, r0
 80a1114:	4608      	mov	r0, r1
 80a1116:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1118:	2200      	movs	r2, #0
 80a111a:	6062      	str	r2, [r4, #4]
 80a111c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1120:	60a2      	str	r2, [r4, #8]
 80a1122:	4a05      	ldr	r2, [pc, #20]	; (80a1138 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1124:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1126:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1128:	2201      	movs	r2, #1
 80a112a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a112c:	461a      	mov	r2, r3
 80a112e:	f7ff fca1 	bl	80a0a74 <HAL_USART_Init>
}
 80a1132:	4620      	mov	r0, r4
 80a1134:	bd10      	pop	{r4, pc}
 80a1136:	bf00      	nop
 80a1138:	080a2674 	.word	0x080a2674

080a113c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a113c:	7c00      	ldrb	r0, [r0, #16]
 80a113e:	f7ff bcc9 	b.w	80a0ad4 <HAL_USART_Is_Enabled>
	...

080a1144 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1144:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1146:	4d0c      	ldr	r5, [pc, #48]	; (80a1178 <_Z22__fetch_global_Serial1v+0x34>)
 80a1148:	6829      	ldr	r1, [r5, #0]
 80a114a:	f011 0401 	ands.w	r4, r1, #1
 80a114e:	d111      	bne.n	80a1174 <_Z22__fetch_global_Serial1v+0x30>
 80a1150:	4628      	mov	r0, r5
 80a1152:	f7fe ffaf 	bl	80a00b4 <__cxa_guard_acquire>
 80a1156:	b168      	cbz	r0, 80a1174 <_Z22__fetch_global_Serial1v+0x30>
 80a1158:	4a08      	ldr	r2, [pc, #32]	; (80a117c <_Z22__fetch_global_Serial1v+0x38>)
 80a115a:	4621      	mov	r1, r4
 80a115c:	4b08      	ldr	r3, [pc, #32]	; (80a1180 <_Z22__fetch_global_Serial1v+0x3c>)
 80a115e:	4809      	ldr	r0, [pc, #36]	; (80a1184 <_Z22__fetch_global_Serial1v+0x40>)
 80a1160:	f7ff ffd6 	bl	80a1110 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1164:	4628      	mov	r0, r5
 80a1166:	f7fe ffaa 	bl	80a00be <__cxa_guard_release>
 80a116a:	4a07      	ldr	r2, [pc, #28]	; (80a1188 <_Z22__fetch_global_Serial1v+0x44>)
 80a116c:	4907      	ldr	r1, [pc, #28]	; (80a118c <_Z22__fetch_global_Serial1v+0x48>)
 80a116e:	4805      	ldr	r0, [pc, #20]	; (80a1184 <_Z22__fetch_global_Serial1v+0x40>)
 80a1170:	f000 fab2 	bl	80a16d8 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1174:	4803      	ldr	r0, [pc, #12]	; (80a1184 <_Z22__fetch_global_Serial1v+0x40>)
 80a1176:	bd38      	pop	{r3, r4, r5, pc}
 80a1178:	20000178 	.word	0x20000178
 80a117c:	2000017c 	.word	0x2000017c
 80a1180:	200000f4 	.word	0x200000f4
 80a1184:	200000e0 	.word	0x200000e0
 80a1188:	20000070 	.word	0x20000070
 80a118c:	080a108d 	.word	0x080a108d

080a1190 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1190:	7441      	strb	r1, [r0, #17]
 80a1192:	4770      	bx	lr

080a1194 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1194:	4770      	bx	lr

080a1196 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1196:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1198:	2100      	movs	r1, #0
 80a119a:	7c00      	ldrb	r0, [r0, #16]
 80a119c:	f7ff fcca 	bl	80a0b34 <HAL_USB_USART_Receive_Data>
}
 80a11a0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a11a4:	bf28      	it	cs
 80a11a6:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a11aa:	bd08      	pop	{r3, pc}

080a11ac <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a11ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a11ae:	2101      	movs	r1, #1
 80a11b0:	7c00      	ldrb	r0, [r0, #16]
 80a11b2:	f7ff fcbf 	bl	80a0b34 <HAL_USB_USART_Receive_Data>
}
 80a11b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a11ba:	bf28      	it	cs
 80a11bc:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
 80a11c0:	bd08      	pop	{r3, pc}

080a11c2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a11c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a11c4:	7c00      	ldrb	r0, [r0, #16]
 80a11c6:	f7ff fcad 	bl	80a0b24 <HAL_USB_USART_Available_Data_For_Write>
}
 80a11ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a11ce:	bd08      	pop	{r3, pc}

080a11d0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a11d0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a11d2:	7c00      	ldrb	r0, [r0, #16]
 80a11d4:	f7ff fc9e 	bl	80a0b14 <HAL_USB_USART_Available_Data>
}
 80a11d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a11dc:	bd08      	pop	{r3, pc}

080a11de <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a11de:	7c00      	ldrb	r0, [r0, #16]
 80a11e0:	f7ff bcb8 	b.w	80a0b54 <HAL_USB_USART_Flush_Data>

080a11e4 <_ZN9USBSerialD0Ev>:
 80a11e4:	b510      	push	{r4, lr}
 80a11e6:	4604      	mov	r4, r0
 80a11e8:	2114      	movs	r1, #20
 80a11ea:	f000 fa7a 	bl	80a16e2 <_ZdlPvj>
 80a11ee:	4620      	mov	r0, r4
 80a11f0:	bd10      	pop	{r4, pc}

080a11f2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a11f2:	b538      	push	{r3, r4, r5, lr}
 80a11f4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a11f6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a11f8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a11fa:	f7ff fc93 	bl	80a0b24 <HAL_USB_USART_Available_Data_For_Write>
 80a11fe:	2800      	cmp	r0, #0
 80a1200:	dc01      	bgt.n	80a1206 <_ZN9USBSerial5writeEh+0x14>
 80a1202:	7c60      	ldrb	r0, [r4, #17]
 80a1204:	b128      	cbz	r0, 80a1212 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1206:	4629      	mov	r1, r5
 80a1208:	7c20      	ldrb	r0, [r4, #16]
 80a120a:	f7ff fc9b 	bl	80a0b44 <HAL_USB_USART_Send_Data>
 80a120e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1212:	bd38      	pop	{r3, r4, r5, pc}

080a1214 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1214:	b510      	push	{r4, lr}
 80a1216:	4604      	mov	r4, r0
 80a1218:	2300      	movs	r3, #0
 80a121a:	6063      	str	r3, [r4, #4]
 80a121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1220:	60a3      	str	r3, [r4, #8]
 80a1222:	4b05      	ldr	r3, [pc, #20]	; (80a1238 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1224:	4608      	mov	r0, r1
 80a1226:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1228:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a122a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a122c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a122e:	4611      	mov	r1, r2
 80a1230:	f7ff fc60 	bl	80a0af4 <HAL_USB_USART_Init>
}
 80a1234:	4620      	mov	r0, r4
 80a1236:	bd10      	pop	{r4, pc}
 80a1238:	080a26a4 	.word	0x080a26a4

080a123c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a123c:	2200      	movs	r2, #0
 80a123e:	7c00      	ldrb	r0, [r0, #16]
 80a1240:	f7ff bc60 	b.w	80a0b04 <HAL_USB_USART_Begin>

080a1244 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1244:	b510      	push	{r4, lr}
 80a1246:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1248:	2214      	movs	r2, #20
 80a124a:	2100      	movs	r1, #0
 80a124c:	f000 fe4b 	bl	80a1ee6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1250:	4b05      	ldr	r3, [pc, #20]	; (80a1268 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1252:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1254:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1256:	4b05      	ldr	r3, [pc, #20]	; (80a126c <_Z19acquireSerialBufferv+0x28>)
 80a1258:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a125a:	f240 1301 	movw	r3, #257	; 0x101
 80a125e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1260:	2381      	movs	r3, #129	; 0x81
 80a1262:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1264:	bd10      	pop	{r4, pc}
 80a1266:	bf00      	nop
 80a1268:	20000285 	.word	0x20000285
 80a126c:	20000204 	.word	0x20000204

080a1270 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1270:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1272:	4d0e      	ldr	r5, [pc, #56]	; (80a12ac <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1274:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1276:	a801      	add	r0, sp, #4
 80a1278:	f7ff ffe4 	bl	80a1244 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a127c:	6829      	ldr	r1, [r5, #0]
 80a127e:	f011 0401 	ands.w	r4, r1, #1
 80a1282:	d110      	bne.n	80a12a6 <_Z16_fetch_usbserialv+0x36>
 80a1284:	4628      	mov	r0, r5
 80a1286:	f7fe ff15 	bl	80a00b4 <__cxa_guard_acquire>
 80a128a:	b160      	cbz	r0, 80a12a6 <_Z16_fetch_usbserialv+0x36>
 80a128c:	aa01      	add	r2, sp, #4
 80a128e:	4621      	mov	r1, r4
 80a1290:	4807      	ldr	r0, [pc, #28]	; (80a12b0 <_Z16_fetch_usbserialv+0x40>)
 80a1292:	f7ff ffbf 	bl	80a1214 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1296:	4628      	mov	r0, r5
 80a1298:	f7fe ff11 	bl	80a00be <__cxa_guard_release>
 80a129c:	4a05      	ldr	r2, [pc, #20]	; (80a12b4 <_Z16_fetch_usbserialv+0x44>)
 80a129e:	4906      	ldr	r1, [pc, #24]	; (80a12b8 <_Z16_fetch_usbserialv+0x48>)
 80a12a0:	4803      	ldr	r0, [pc, #12]	; (80a12b0 <_Z16_fetch_usbserialv+0x40>)
 80a12a2:	f000 fa19 	bl	80a16d8 <__aeabi_atexit>
	return _usbserial;
}
 80a12a6:	4802      	ldr	r0, [pc, #8]	; (80a12b0 <_Z16_fetch_usbserialv+0x40>)
 80a12a8:	b007      	add	sp, #28
 80a12aa:	bd30      	pop	{r4, r5, pc}
 80a12ac:	20000200 	.word	0x20000200
 80a12b0:	20000388 	.word	0x20000388
 80a12b4:	20000070 	.word	0x20000070
 80a12b8:	080a1195 	.word	0x080a1195

080a12bc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a12bc:	b510      	push	{r4, lr}
 80a12be:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a12c0:	2214      	movs	r2, #20
 80a12c2:	2100      	movs	r1, #0
 80a12c4:	f000 fe0f 	bl	80a1ee6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a12c8:	4b05      	ldr	r3, [pc, #20]	; (80a12e0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a12ca:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a12cc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a12ce:	4b05      	ldr	r3, [pc, #20]	; (80a12e4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a12d0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a12d2:	f240 1301 	movw	r3, #257	; 0x101
 80a12d6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a12d8:	2381      	movs	r3, #129	; 0x81
 80a12da:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a12dc:	bd10      	pop	{r4, pc}
 80a12de:	bf00      	nop
 80a12e0:	20000438 	.word	0x20000438
 80a12e4:	200003a0 	.word	0x200003a0

080a12e8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a12e8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a12ea:	4c0e      	ldr	r4, [pc, #56]	; (80a1324 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a12ec:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a12ee:	a801      	add	r0, sp, #4
 80a12f0:	f7ff ffe4 	bl	80a12bc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a12f4:	6823      	ldr	r3, [r4, #0]
 80a12f6:	07db      	lsls	r3, r3, #31
 80a12f8:	d410      	bmi.n	80a131c <_Z17_fetch_usbserial1v+0x34>
 80a12fa:	4620      	mov	r0, r4
 80a12fc:	f7fe feda 	bl	80a00b4 <__cxa_guard_acquire>
 80a1300:	b160      	cbz	r0, 80a131c <_Z17_fetch_usbserial1v+0x34>
 80a1302:	aa01      	add	r2, sp, #4
 80a1304:	2101      	movs	r1, #1
 80a1306:	4808      	ldr	r0, [pc, #32]	; (80a1328 <_Z17_fetch_usbserial1v+0x40>)
 80a1308:	f7ff ff84 	bl	80a1214 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a130c:	4620      	mov	r0, r4
 80a130e:	f7fe fed6 	bl	80a00be <__cxa_guard_release>
 80a1312:	4a06      	ldr	r2, [pc, #24]	; (80a132c <_Z17_fetch_usbserial1v+0x44>)
 80a1314:	4906      	ldr	r1, [pc, #24]	; (80a1330 <_Z17_fetch_usbserial1v+0x48>)
 80a1316:	4804      	ldr	r0, [pc, #16]	; (80a1328 <_Z17_fetch_usbserial1v+0x40>)
 80a1318:	f000 f9de 	bl	80a16d8 <__aeabi_atexit>
  return _usbserial1;
}
 80a131c:	4802      	ldr	r0, [pc, #8]	; (80a1328 <_Z17_fetch_usbserial1v+0x40>)
 80a131e:	b006      	add	sp, #24
 80a1320:	bd10      	pop	{r4, pc}
 80a1322:	bf00      	nop
 80a1324:	2000039c 	.word	0x2000039c
 80a1328:	20000424 	.word	0x20000424
 80a132c:	20000070 	.word	0x20000070
 80a1330:	080a1195 	.word	0x080a1195

080a1334 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1334:	2200      	movs	r2, #0
 80a1336:	4611      	mov	r1, r2
 80a1338:	6840      	ldr	r0, [r0, #4]
 80a133a:	f7ff bc67 	b.w	80a0c0c <network_ready>

080a133e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a133e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1340:	4616      	mov	r6, r2
 80a1342:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a1344:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a1346:	460f      	mov	r7, r1
 80a1348:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a134a:	2100      	movs	r1, #0
 80a134c:	a803      	add	r0, sp, #12
 80a134e:	f000 fdca 	bl	80a1ee6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a1352:	4630      	mov	r0, r6
 80a1354:	f000 fdf8 	bl	80a1f48 <strlen>
 80a1358:	2500      	movs	r5, #0
 80a135a:	9500      	str	r5, [sp, #0]
 80a135c:	b281      	uxth	r1, r0
 80a135e:	687b      	ldr	r3, [r7, #4]
 80a1360:	aa03      	add	r2, sp, #12
 80a1362:	4630      	mov	r0, r6
 80a1364:	f7ff fbfe 	bl	80a0b64 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a1368:	b120      	cbz	r0, 80a1374 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a136a:	4629      	mov	r1, r5
 80a136c:	4620      	mov	r0, r4
 80a136e:	f7ff fd35 	bl	80a0ddc <_ZN9IPAddressC1Em>
 80a1372:	e003      	b.n	80a137c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a1374:	a903      	add	r1, sp, #12
 80a1376:	4620      	mov	r0, r4
 80a1378:	f7ff fd1e 	bl	80a0db8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a137c:	4620      	mov	r0, r4
 80a137e:	b009      	add	sp, #36	; 0x24
 80a1380:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1382 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a1382:	2200      	movs	r2, #0
 80a1384:	4611      	mov	r1, r2
 80a1386:	6840      	ldr	r0, [r0, #4]
 80a1388:	f7ff bc60 	b.w	80a0c4c <network_listening>

080a138c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a138c:	2200      	movs	r2, #0
 80a138e:	4611      	mov	r1, r2
 80a1390:	6840      	ldr	r0, [r0, #4]
 80a1392:	f7ff bc6b 	b.w	80a0c6c <network_get_listen_timeout>

080a1396 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a1396:	2200      	movs	r2, #0
 80a1398:	6840      	ldr	r0, [r0, #4]
 80a139a:	f7ff bc5f 	b.w	80a0c5c <network_set_listen_timeout>

080a139e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a139e:	2200      	movs	r2, #0
 80a13a0:	f081 0101 	eor.w	r1, r1, #1
 80a13a4:	6840      	ldr	r0, [r0, #4]
 80a13a6:	f7ff bc49 	b.w	80a0c3c <network_listen>

080a13aa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a13aa:	2300      	movs	r3, #0
 80a13ac:	461a      	mov	r2, r3
 80a13ae:	4619      	mov	r1, r3
 80a13b0:	6840      	ldr	r0, [r0, #4]
 80a13b2:	f7ff bc3b 	b.w	80a0c2c <network_off>

080a13b6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a13b6:	2300      	movs	r3, #0
 80a13b8:	461a      	mov	r2, r3
 80a13ba:	4619      	mov	r1, r3
 80a13bc:	6840      	ldr	r0, [r0, #4]
 80a13be:	f7ff bc2d 	b.w	80a0c1c <network_on>

080a13c2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a13c2:	2200      	movs	r2, #0
 80a13c4:	4611      	mov	r1, r2
 80a13c6:	6840      	ldr	r0, [r0, #4]
 80a13c8:	f7ff bc10 	b.w	80a0bec <network_connecting>

080a13cc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a13cc:	2200      	movs	r2, #0
 80a13ce:	2102      	movs	r1, #2
 80a13d0:	6840      	ldr	r0, [r0, #4]
 80a13d2:	f7ff bc13 	b.w	80a0bfc <network_disconnect>

080a13d6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a13d6:	2300      	movs	r3, #0
 80a13d8:	461a      	mov	r2, r3
 80a13da:	6840      	ldr	r0, [r0, #4]
 80a13dc:	f7ff bbfe 	b.w	80a0bdc <network_connect>

080a13e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 80a13e0:	4b02      	ldr	r3, [pc, #8]	; (80a13ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a13e2:	2204      	movs	r2, #4
 80a13e4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a13e6:	4a02      	ldr	r2, [pc, #8]	; (80a13f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a13e8:	601a      	str	r2, [r3, #0]
 80a13ea:	4770      	bx	lr
 80a13ec:	2000053c 	.word	0x2000053c
 80a13f0:	080a26d4 	.word	0x080a26d4

080a13f4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a13f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a13f6:	4b14      	ldr	r3, [pc, #80]	; (80a1448 <serialEventRun+0x54>)
 80a13f8:	b133      	cbz	r3, 80a1408 <serialEventRun+0x14>
 80a13fa:	f7ff ff39 	bl	80a1270 <_Z16_fetch_usbserialv>
 80a13fe:	6803      	ldr	r3, [r0, #0]
 80a1400:	691b      	ldr	r3, [r3, #16]
 80a1402:	4798      	blx	r3
 80a1404:	2800      	cmp	r0, #0
 80a1406:	dc16      	bgt.n	80a1436 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1408:	4b10      	ldr	r3, [pc, #64]	; (80a144c <serialEventRun+0x58>)
 80a140a:	b133      	cbz	r3, 80a141a <serialEventRun+0x26>
 80a140c:	f7ff fe9a 	bl	80a1144 <_Z22__fetch_global_Serial1v>
 80a1410:	6803      	ldr	r3, [r0, #0]
 80a1412:	691b      	ldr	r3, [r3, #16]
 80a1414:	4798      	blx	r3
 80a1416:	2800      	cmp	r0, #0
 80a1418:	dc10      	bgt.n	80a143c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a141a:	4b0d      	ldr	r3, [pc, #52]	; (80a1450 <serialEventRun+0x5c>)
 80a141c:	b10b      	cbz	r3, 80a1422 <serialEventRun+0x2e>
 80a141e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1422:	4b0c      	ldr	r3, [pc, #48]	; (80a1454 <serialEventRun+0x60>)
 80a1424:	b17b      	cbz	r3, 80a1446 <serialEventRun+0x52>
 80a1426:	f7ff ff5f 	bl	80a12e8 <_Z17_fetch_usbserial1v>
 80a142a:	6803      	ldr	r3, [r0, #0]
 80a142c:	691b      	ldr	r3, [r3, #16]
 80a142e:	4798      	blx	r3
 80a1430:	2800      	cmp	r0, #0
 80a1432:	dc06      	bgt.n	80a1442 <serialEventRun+0x4e>
 80a1434:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1436:	f3af 8000 	nop.w
 80a143a:	e7e5      	b.n	80a1408 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a143c:	f3af 8000 	nop.w
 80a1440:	e7eb      	b.n	80a141a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1442:	f3af 8000 	nop.w
 80a1446:	bd08      	pop	{r3, pc}
	...

080a1458 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1458:	b508      	push	{r3, lr}
	serialEventRun();
 80a145a:	f7ff ffcb 	bl	80a13f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a145e:	f7ff fa6f 	bl	80a0940 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1462:	4b01      	ldr	r3, [pc, #4]	; (80a1468 <_post_loop+0x10>)
 80a1464:	6018      	str	r0, [r3, #0]
 80a1466:	bd08      	pop	{r3, pc}
 80a1468:	2000054c 	.word	0x2000054c

080a146c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a146c:	4802      	ldr	r0, [pc, #8]	; (80a1478 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a146e:	4a03      	ldr	r2, [pc, #12]	; (80a147c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1470:	4903      	ldr	r1, [pc, #12]	; (80a1480 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1472:	1a12      	subs	r2, r2, r0
 80a1474:	f000 bd2c 	b.w	80a1ed0 <memcpy>
 80a1478:	40024000 	.word	0x40024000
 80a147c:	40024004 	.word	0x40024004
 80a1480:	080a27a0 	.word	0x080a27a0

080a1484 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1484:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1486:	2300      	movs	r3, #0
 80a1488:	9300      	str	r3, [sp, #0]
 80a148a:	461a      	mov	r2, r3
 80a148c:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1490:	f7ff fb92 	bl	80a0bb8 <system_ctrl_set_result>
}
 80a1494:	b003      	add	sp, #12
 80a1496:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a149c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a149c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a149e:	8843      	ldrh	r3, [r0, #2]
 80a14a0:	2b0a      	cmp	r3, #10
 80a14a2:	d008      	beq.n	80a14b6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a14a4:	2b50      	cmp	r3, #80	; 0x50
 80a14a6:	d109      	bne.n	80a14bc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a14a8:	4b09      	ldr	r3, [pc, #36]	; (80a14d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a14aa:	681b      	ldr	r3, [r3, #0]
 80a14ac:	b13b      	cbz	r3, 80a14be <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a14ae:	b003      	add	sp, #12
 80a14b0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a14b4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a14b6:	f7ff ffe5 	bl	80a1484 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a14ba:	e006      	b.n	80a14ca <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a14bc:	2300      	movs	r3, #0
 80a14be:	9300      	str	r3, [sp, #0]
 80a14c0:	461a      	mov	r2, r3
 80a14c2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a14c6:	f7ff fb77 	bl	80a0bb8 <system_ctrl_set_result>
        break;
    }
}
 80a14ca:	b003      	add	sp, #12
 80a14cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a14d0:	20000544 	.word	0x20000544

080a14d4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a14d4:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a14d6:	4c10      	ldr	r4, [pc, #64]	; (80a1518 <module_user_init_hook+0x44>)
 80a14d8:	4d10      	ldr	r5, [pc, #64]	; (80a151c <module_user_init_hook+0x48>)
 80a14da:	6823      	ldr	r3, [r4, #0]
 80a14dc:	42ab      	cmp	r3, r5
 80a14de:	4b10      	ldr	r3, [pc, #64]	; (80a1520 <module_user_init_hook+0x4c>)
 80a14e0:	bf0c      	ite	eq
 80a14e2:	2201      	moveq	r2, #1
 80a14e4:	2200      	movne	r2, #0
 80a14e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a14e8:	d002      	beq.n	80a14f0 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a14ea:	f7ff ffbf 	bl	80a146c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a14ee:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a14f0:	f7ff fa16 	bl	80a0920 <HAL_RNG_GetRandomNumber>
 80a14f4:	4604      	mov	r4, r0
    srand(seed);
 80a14f6:	f000 fcff 	bl	80a1ef8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a14fa:	4b0a      	ldr	r3, [pc, #40]	; (80a1524 <module_user_init_hook+0x50>)
 80a14fc:	b113      	cbz	r3, 80a1504 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a14fe:	4620      	mov	r0, r4
 80a1500:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1504:	2100      	movs	r1, #0
 80a1506:	4807      	ldr	r0, [pc, #28]	; (80a1524 <module_user_init_hook+0x50>)
 80a1508:	f7ff fb60 	bl	80a0bcc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a150c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1510:	2100      	movs	r1, #0
 80a1512:	4805      	ldr	r0, [pc, #20]	; (80a1528 <module_user_init_hook+0x54>)
 80a1514:	f7ff bb46 	b.w	80a0ba4 <system_ctrl_set_app_request_handler>
 80a1518:	40024000 	.word	0x40024000
 80a151c:	9a271c1e 	.word	0x9a271c1e
 80a1520:	20000548 	.word	0x20000548
 80a1524:	00000000 	.word	0x00000000
 80a1528:	080a149d 	.word	0x080a149d

080a152c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a152c:	b510      	push	{r4, lr}
 80a152e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1530:	f000 f8b2 	bl	80a1698 <_ZN8particle7globals11instanceSpiEv>
 80a1534:	f7ff fd74 	bl	80a1020 <_ZN8SPIClass9isEnabledEv>
 80a1538:	b128      	cbz	r0, 80a1546 <pinAvailable+0x1a>
 80a153a:	f1a4 030d 	sub.w	r3, r4, #13
 80a153e:	2b02      	cmp	r3, #2
 80a1540:	d801      	bhi.n	80a1546 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
 80a1542:	2000      	movs	r0, #0
 80a1544:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1546:	f000 f869 	bl	80a161c <_Z19__fetch_global_Wirev>
 80a154a:	f7ff fc02 	bl	80a0d52 <_ZN7TwoWire9isEnabledEv>
 80a154e:	b108      	cbz	r0, 80a1554 <pinAvailable+0x28>
 80a1550:	2c01      	cmp	r4, #1
 80a1552:	d9f6      	bls.n	80a1542 <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1554:	f7ff fdf6 	bl	80a1144 <_Z22__fetch_global_Serial1v>
 80a1558:	f7ff fdf0 	bl	80a113c <_ZN11USARTSerial9isEnabledEv>
 80a155c:	b118      	cbz	r0, 80a1566 <pinAvailable+0x3a>
 80a155e:	f1a4 0312 	sub.w	r3, r4, #18
 80a1562:	2b01      	cmp	r3, #1
 80a1564:	d9ed      	bls.n	80a1542 <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1566:	2c17      	cmp	r4, #23
 80a1568:	bf8c      	ite	hi
 80a156a:	2000      	movhi	r0, #0
 80a156c:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a156e:	bd10      	pop	{r4, pc}

080a1570 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1570:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1572:	b538      	push	{r3, r4, r5, lr}
 80a1574:	4604      	mov	r4, r0
 80a1576:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1578:	d80a      	bhi.n	80a1590 <pinMode+0x20>
 80a157a:	29ff      	cmp	r1, #255	; 0xff
 80a157c:	d008      	beq.n	80a1590 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a157e:	f7ff ffd5 	bl	80a152c <pinAvailable>
 80a1582:	b128      	cbz	r0, 80a1590 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1584:	4629      	mov	r1, r5
 80a1586:	4620      	mov	r0, r4
}
 80a1588:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a158c:	f7ff b9f0 	b.w	80a0970 <HAL_Pin_Mode>
 80a1590:	bd38      	pop	{r3, r4, r5, pc}

080a1592 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1592:	b510      	push	{r4, lr}
 80a1594:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1596:	f7ff f9f3 	bl	80a0980 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a159a:	3804      	subs	r0, #4
 80a159c:	b2c0      	uxtb	r0, r0
 80a159e:	2801      	cmp	r0, #1
 80a15a0:	d908      	bls.n	80a15b4 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a15a2:	4620      	mov	r0, r4
 80a15a4:	f7ff ffc2 	bl	80a152c <pinAvailable>
 80a15a8:	b120      	cbz	r0, 80a15b4 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a15aa:	4620      	mov	r0, r4
}
 80a15ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a15b0:	f7ff b9ee 	b.w	80a0990 <HAL_GPIO_Read>
}
 80a15b4:	2000      	movs	r0, #0
 80a15b6:	bd10      	pop	{r4, pc}

080a15b8 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a15b8:	b510      	push	{r4, lr}
 80a15ba:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a15bc:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a15be:	bf9c      	itt	ls
 80a15c0:	340a      	addls	r4, #10
 80a15c2:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a15c4:	4620      	mov	r0, r4
 80a15c6:	f7ff ffb1 	bl	80a152c <pinAvailable>
 80a15ca:	b150      	cbz	r0, 80a15e2 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a15cc:	2103      	movs	r1, #3
 80a15ce:	4620      	mov	r0, r4
 80a15d0:	f7ff f9c6 	bl	80a0960 <HAL_Validate_Pin_Function>
 80a15d4:	2803      	cmp	r0, #3
 80a15d6:	d104      	bne.n	80a15e2 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a15d8:	4620      	mov	r0, r4
}
 80a15da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a15de:	f7ff b9df 	b.w	80a09a0 <HAL_ADC_Read>
}
 80a15e2:	2000      	movs	r0, #0
 80a15e4:	bd10      	pop	{r4, pc}
	...

080a15e8 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a15e8:	b570      	push	{r4, r5, r6, lr}
 80a15ea:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a15ec:	2514      	movs	r5, #20
 80a15ee:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a15f0:	4e09      	ldr	r6, [pc, #36]	; (80a1618 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a15f2:	2100      	movs	r1, #0
 80a15f4:	f000 fc77 	bl	80a1ee6 <memset>
 80a15f8:	8025      	strh	r5, [r4, #0]
 80a15fa:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a15fc:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a15fe:	60a5      	str	r5, [r4, #8]
 80a1600:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1602:	4628      	mov	r0, r5
 80a1604:	f000 f887 	bl	80a1716 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a1608:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a160a:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a160c:	4628      	mov	r0, r5
 80a160e:	f000 f882 	bl	80a1716 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a1612:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a1614:	4620      	mov	r0, r4
 80a1616:	bd70      	pop	{r4, r5, r6, pc}
 80a1618:	080a2700 	.word	0x080a2700

080a161c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a161c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a161e:	4d0e      	ldr	r5, [pc, #56]	; (80a1658 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a1620:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a1622:	6829      	ldr	r1, [r5, #0]
 80a1624:	f011 0401 	ands.w	r4, r1, #1
 80a1628:	d113      	bne.n	80a1652 <_Z19__fetch_global_Wirev+0x36>
 80a162a:	4628      	mov	r0, r5
 80a162c:	f7fe fd42 	bl	80a00b4 <__cxa_guard_acquire>
 80a1630:	b178      	cbz	r0, 80a1652 <_Z19__fetch_global_Wirev+0x36>
 80a1632:	a801      	add	r0, sp, #4
 80a1634:	f7ff ffd8 	bl	80a15e8 <_Z17acquireWireBufferv>
 80a1638:	aa01      	add	r2, sp, #4
 80a163a:	4621      	mov	r1, r4
 80a163c:	4807      	ldr	r0, [pc, #28]	; (80a165c <_Z19__fetch_global_Wirev+0x40>)
 80a163e:	f7ff fb65 	bl	80a0d0c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a1642:	4628      	mov	r0, r5
 80a1644:	f7fe fd3b 	bl	80a00be <__cxa_guard_release>
 80a1648:	4a05      	ldr	r2, [pc, #20]	; (80a1660 <_Z19__fetch_global_Wirev+0x44>)
 80a164a:	4906      	ldr	r1, [pc, #24]	; (80a1664 <_Z19__fetch_global_Wirev+0x48>)
 80a164c:	4803      	ldr	r0, [pc, #12]	; (80a165c <_Z19__fetch_global_Wirev+0x40>)
 80a164e:	f000 f843 	bl	80a16d8 <__aeabi_atexit>
	return wire;
}
 80a1652:	4802      	ldr	r0, [pc, #8]	; (80a165c <_Z19__fetch_global_Wirev+0x40>)
 80a1654:	b007      	add	sp, #28
 80a1656:	bd30      	pop	{r4, r5, pc}
 80a1658:	20000550 	.word	0x20000550
 80a165c:	20000554 	.word	0x20000554
 80a1660:	20000070 	.word	0x20000070
 80a1664:	080a0cb5 	.word	0x080a0cb5

080a1668 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1668:	b513      	push	{r0, r1, r4, lr}
 80a166a:	4c08      	ldr	r4, [pc, #32]	; (80a168c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a166c:	2300      	movs	r3, #0
 80a166e:	461a      	mov	r2, r3
 80a1670:	4619      	mov	r1, r3
 80a1672:	9300      	str	r3, [sp, #0]
 80a1674:	4620      	mov	r0, r4
 80a1676:	f7ff fbc7 	bl	80a0e08 <_ZN9IPAddressC1Ehhhh>
 80a167a:	4620      	mov	r0, r4
 80a167c:	4a04      	ldr	r2, [pc, #16]	; (80a1690 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a167e:	4905      	ldr	r1, [pc, #20]	; (80a1694 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1680:	b002      	add	sp, #8
 80a1682:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1686:	f000 b827 	b.w	80a16d8 <__aeabi_atexit>
 80a168a:	bf00      	nop
 80a168c:	20000568 	.word	0x20000568
 80a1690:	20000070 	.word	0x20000070
 80a1694:	080a0d5b 	.word	0x080a0d5b

080a1698 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
 80a1698:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
 80a169a:	4d0b      	ldr	r5, [pc, #44]	; (80a16c8 <_ZN8particle7globals11instanceSpiEv+0x30>)
 80a169c:	6829      	ldr	r1, [r5, #0]
 80a169e:	f011 0401 	ands.w	r4, r1, #1
 80a16a2:	d10f      	bne.n	80a16c4 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a16a4:	4628      	mov	r0, r5
 80a16a6:	f7fe fd05 	bl	80a00b4 <__cxa_guard_acquire>
 80a16aa:	b158      	cbz	r0, 80a16c4 <_ZN8particle7globals11instanceSpiEv+0x2c>
 80a16ac:	4621      	mov	r1, r4
 80a16ae:	4807      	ldr	r0, [pc, #28]	; (80a16cc <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a16b0:	f7ff fca2 	bl	80a0ff8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a16b4:	4628      	mov	r0, r5
 80a16b6:	f7fe fd02 	bl	80a00be <__cxa_guard_release>
 80a16ba:	4a05      	ldr	r2, [pc, #20]	; (80a16d0 <_ZN8particle7globals11instanceSpiEv+0x38>)
 80a16bc:	4905      	ldr	r1, [pc, #20]	; (80a16d4 <_ZN8particle7globals11instanceSpiEv+0x3c>)
 80a16be:	4803      	ldr	r0, [pc, #12]	; (80a16cc <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a16c0:	f000 f80a 	bl	80a16d8 <__aeabi_atexit>
    return instance;
}
 80a16c4:	4801      	ldr	r0, [pc, #4]	; (80a16cc <_ZN8particle7globals11instanceSpiEv+0x34>)
 80a16c6:	bd38      	pop	{r3, r4, r5, pc}
 80a16c8:	20000590 	.word	0x20000590
 80a16cc:	20000580 	.word	0x20000580
 80a16d0:	20000070 	.word	0x20000070
 80a16d4:	080a0fcd 	.word	0x080a0fcd

080a16d8 <__aeabi_atexit>:
 80a16d8:	460b      	mov	r3, r1
 80a16da:	4601      	mov	r1, r0
 80a16dc:	4618      	mov	r0, r3
 80a16de:	f000 bbe9 	b.w	80a1eb4 <__cxa_atexit>

080a16e2 <_ZdlPvj>:
 80a16e2:	f7fe bcda 	b.w	80a009a <_ZdlPv>
	...

080a16e8 <_ZSt15get_new_handlerv>:
 80a16e8:	4b02      	ldr	r3, [pc, #8]	; (80a16f4 <_ZSt15get_new_handlerv+0xc>)
 80a16ea:	6818      	ldr	r0, [r3, #0]
 80a16ec:	f3bf 8f5f 	dmb	sy
 80a16f0:	4770      	bx	lr
 80a16f2:	bf00      	nop
 80a16f4:	20000594 	.word	0x20000594

080a16f8 <_ZnwjRKSt9nothrow_t>:
 80a16f8:	b510      	push	{r4, lr}
 80a16fa:	2800      	cmp	r0, #0
 80a16fc:	bf14      	ite	ne
 80a16fe:	4604      	movne	r4, r0
 80a1700:	2401      	moveq	r4, #1
 80a1702:	4620      	mov	r0, r4
 80a1704:	f7ff faba 	bl	80a0c7c <malloc>
 80a1708:	b920      	cbnz	r0, 80a1714 <_ZnwjRKSt9nothrow_t+0x1c>
 80a170a:	f7ff ffed 	bl	80a16e8 <_ZSt15get_new_handlerv>
 80a170e:	b108      	cbz	r0, 80a1714 <_ZnwjRKSt9nothrow_t+0x1c>
 80a1710:	4780      	blx	r0
 80a1712:	e7f6      	b.n	80a1702 <_ZnwjRKSt9nothrow_t+0xa>
 80a1714:	bd10      	pop	{r4, pc}

080a1716 <_ZnajRKSt9nothrow_t>:
 80a1716:	f7ff bfef 	b.w	80a16f8 <_ZnwjRKSt9nothrow_t>
	...

080a171c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a171c:	4b24      	ldr	r3, [pc, #144]	; (80a17b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a171e:	681a      	ldr	r2, [r3, #0]
 80a1720:	07d0      	lsls	r0, r2, #31
 80a1722:	bf5c      	itt	pl
 80a1724:	2201      	movpl	r2, #1
 80a1726:	601a      	strpl	r2, [r3, #0]
 80a1728:	4b22      	ldr	r3, [pc, #136]	; (80a17b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a172a:	681a      	ldr	r2, [r3, #0]
 80a172c:	07d1      	lsls	r1, r2, #31
 80a172e:	bf5c      	itt	pl
 80a1730:	2201      	movpl	r2, #1
 80a1732:	601a      	strpl	r2, [r3, #0]
 80a1734:	4b20      	ldr	r3, [pc, #128]	; (80a17b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1736:	681a      	ldr	r2, [r3, #0]
 80a1738:	07d2      	lsls	r2, r2, #31
 80a173a:	bf5c      	itt	pl
 80a173c:	2201      	movpl	r2, #1
 80a173e:	601a      	strpl	r2, [r3, #0]
 80a1740:	4b1e      	ldr	r3, [pc, #120]	; (80a17bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1742:	681a      	ldr	r2, [r3, #0]
 80a1744:	07d0      	lsls	r0, r2, #31
 80a1746:	bf5c      	itt	pl
 80a1748:	2201      	movpl	r2, #1
 80a174a:	601a      	strpl	r2, [r3, #0]
 80a174c:	4b1c      	ldr	r3, [pc, #112]	; (80a17c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a174e:	681a      	ldr	r2, [r3, #0]
 80a1750:	07d1      	lsls	r1, r2, #31
 80a1752:	bf5c      	itt	pl
 80a1754:	2201      	movpl	r2, #1
 80a1756:	601a      	strpl	r2, [r3, #0]
 80a1758:	4b1a      	ldr	r3, [pc, #104]	; (80a17c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a175a:	681a      	ldr	r2, [r3, #0]
 80a175c:	07d2      	lsls	r2, r2, #31
 80a175e:	bf5c      	itt	pl
 80a1760:	2201      	movpl	r2, #1
 80a1762:	601a      	strpl	r2, [r3, #0]
 80a1764:	4b18      	ldr	r3, [pc, #96]	; (80a17c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1766:	681a      	ldr	r2, [r3, #0]
 80a1768:	07d0      	lsls	r0, r2, #31
 80a176a:	bf5c      	itt	pl
 80a176c:	2201      	movpl	r2, #1
 80a176e:	601a      	strpl	r2, [r3, #0]
 80a1770:	4b16      	ldr	r3, [pc, #88]	; (80a17cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1772:	681a      	ldr	r2, [r3, #0]
 80a1774:	07d1      	lsls	r1, r2, #31
 80a1776:	bf5c      	itt	pl
 80a1778:	2201      	movpl	r2, #1
 80a177a:	601a      	strpl	r2, [r3, #0]
 80a177c:	4b14      	ldr	r3, [pc, #80]	; (80a17d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a177e:	681a      	ldr	r2, [r3, #0]
 80a1780:	07d2      	lsls	r2, r2, #31
 80a1782:	bf5c      	itt	pl
 80a1784:	2201      	movpl	r2, #1
 80a1786:	601a      	strpl	r2, [r3, #0]
 80a1788:	4b12      	ldr	r3, [pc, #72]	; (80a17d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a178a:	681a      	ldr	r2, [r3, #0]
 80a178c:	07d0      	lsls	r0, r2, #31
 80a178e:	bf5c      	itt	pl
 80a1790:	2201      	movpl	r2, #1
 80a1792:	601a      	strpl	r2, [r3, #0]
 80a1794:	4b10      	ldr	r3, [pc, #64]	; (80a17d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1796:	681a      	ldr	r2, [r3, #0]
 80a1798:	07d1      	lsls	r1, r2, #31
 80a179a:	bf5c      	itt	pl
 80a179c:	2201      	movpl	r2, #1
 80a179e:	601a      	strpl	r2, [r3, #0]
 80a17a0:	4b0e      	ldr	r3, [pc, #56]	; (80a17dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a17a2:	681a      	ldr	r2, [r3, #0]
 80a17a4:	07d2      	lsls	r2, r2, #31
 80a17a6:	bf5c      	itt	pl
 80a17a8:	2201      	movpl	r2, #1
 80a17aa:	601a      	strpl	r2, [r3, #0]
 80a17ac:	4770      	bx	lr
 80a17ae:	bf00      	nop
 80a17b0:	200005c4 	.word	0x200005c4
 80a17b4:	200005c0 	.word	0x200005c0
 80a17b8:	200005bc 	.word	0x200005bc
 80a17bc:	200005b8 	.word	0x200005b8
 80a17c0:	200005b4 	.word	0x200005b4
 80a17c4:	200005b0 	.word	0x200005b0
 80a17c8:	200005ac 	.word	0x200005ac
 80a17cc:	200005a8 	.word	0x200005a8
 80a17d0:	200005a4 	.word	0x200005a4
 80a17d4:	200005a0 	.word	0x200005a0
 80a17d8:	2000059c 	.word	0x2000059c
 80a17dc:	20000598 	.word	0x20000598

080a17e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a17e0:	4b18      	ldr	r3, [pc, #96]	; (80a1844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a17e2:	681a      	ldr	r2, [r3, #0]
 80a17e4:	07d1      	lsls	r1, r2, #31
 80a17e6:	bf5c      	itt	pl
 80a17e8:	2201      	movpl	r2, #1
 80a17ea:	601a      	strpl	r2, [r3, #0]
 80a17ec:	4b16      	ldr	r3, [pc, #88]	; (80a1848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a17ee:	681a      	ldr	r2, [r3, #0]
 80a17f0:	07d2      	lsls	r2, r2, #31
 80a17f2:	bf5c      	itt	pl
 80a17f4:	2201      	movpl	r2, #1
 80a17f6:	601a      	strpl	r2, [r3, #0]
 80a17f8:	4b14      	ldr	r3, [pc, #80]	; (80a184c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a17fa:	681a      	ldr	r2, [r3, #0]
 80a17fc:	07d0      	lsls	r0, r2, #31
 80a17fe:	bf5c      	itt	pl
 80a1800:	2201      	movpl	r2, #1
 80a1802:	601a      	strpl	r2, [r3, #0]
 80a1804:	4b12      	ldr	r3, [pc, #72]	; (80a1850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1806:	681a      	ldr	r2, [r3, #0]
 80a1808:	07d1      	lsls	r1, r2, #31
 80a180a:	bf5c      	itt	pl
 80a180c:	2201      	movpl	r2, #1
 80a180e:	601a      	strpl	r2, [r3, #0]
 80a1810:	4b10      	ldr	r3, [pc, #64]	; (80a1854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1812:	681a      	ldr	r2, [r3, #0]
 80a1814:	07d2      	lsls	r2, r2, #31
 80a1816:	bf5c      	itt	pl
 80a1818:	2201      	movpl	r2, #1
 80a181a:	601a      	strpl	r2, [r3, #0]
 80a181c:	4b0e      	ldr	r3, [pc, #56]	; (80a1858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a181e:	681a      	ldr	r2, [r3, #0]
 80a1820:	07d0      	lsls	r0, r2, #31
 80a1822:	bf5c      	itt	pl
 80a1824:	2201      	movpl	r2, #1
 80a1826:	601a      	strpl	r2, [r3, #0]
 80a1828:	4b0c      	ldr	r3, [pc, #48]	; (80a185c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a182a:	681a      	ldr	r2, [r3, #0]
 80a182c:	07d1      	lsls	r1, r2, #31
 80a182e:	bf5c      	itt	pl
 80a1830:	2201      	movpl	r2, #1
 80a1832:	601a      	strpl	r2, [r3, #0]
 80a1834:	4b0a      	ldr	r3, [pc, #40]	; (80a1860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1836:	681a      	ldr	r2, [r3, #0]
 80a1838:	07d2      	lsls	r2, r2, #31
 80a183a:	bf5c      	itt	pl
 80a183c:	2201      	movpl	r2, #1
 80a183e:	601a      	strpl	r2, [r3, #0]
 80a1840:	4770      	bx	lr
 80a1842:	bf00      	nop
 80a1844:	200005e4 	.word	0x200005e4
 80a1848:	200005e0 	.word	0x200005e0
 80a184c:	200005dc 	.word	0x200005dc
 80a1850:	200005d8 	.word	0x200005d8
 80a1854:	200005d4 	.word	0x200005d4
 80a1858:	200005d0 	.word	0x200005d0
 80a185c:	200005cc 	.word	0x200005cc
 80a1860:	200005c8 	.word	0x200005c8

080a1864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1864:	4b18      	ldr	r3, [pc, #96]	; (80a18c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1866:	681a      	ldr	r2, [r3, #0]
 80a1868:	07d1      	lsls	r1, r2, #31
 80a186a:	bf5c      	itt	pl
 80a186c:	2201      	movpl	r2, #1
 80a186e:	601a      	strpl	r2, [r3, #0]
 80a1870:	4b16      	ldr	r3, [pc, #88]	; (80a18cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1872:	681a      	ldr	r2, [r3, #0]
 80a1874:	07d2      	lsls	r2, r2, #31
 80a1876:	bf5c      	itt	pl
 80a1878:	2201      	movpl	r2, #1
 80a187a:	601a      	strpl	r2, [r3, #0]
 80a187c:	4b14      	ldr	r3, [pc, #80]	; (80a18d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a187e:	681a      	ldr	r2, [r3, #0]
 80a1880:	07d0      	lsls	r0, r2, #31
 80a1882:	bf5c      	itt	pl
 80a1884:	2201      	movpl	r2, #1
 80a1886:	601a      	strpl	r2, [r3, #0]
 80a1888:	4b12      	ldr	r3, [pc, #72]	; (80a18d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a188a:	681a      	ldr	r2, [r3, #0]
 80a188c:	07d1      	lsls	r1, r2, #31
 80a188e:	bf5c      	itt	pl
 80a1890:	2201      	movpl	r2, #1
 80a1892:	601a      	strpl	r2, [r3, #0]
 80a1894:	4b10      	ldr	r3, [pc, #64]	; (80a18d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1896:	681a      	ldr	r2, [r3, #0]
 80a1898:	07d2      	lsls	r2, r2, #31
 80a189a:	bf5c      	itt	pl
 80a189c:	2201      	movpl	r2, #1
 80a189e:	601a      	strpl	r2, [r3, #0]
 80a18a0:	4b0e      	ldr	r3, [pc, #56]	; (80a18dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a18a2:	681a      	ldr	r2, [r3, #0]
 80a18a4:	07d0      	lsls	r0, r2, #31
 80a18a6:	bf5c      	itt	pl
 80a18a8:	2201      	movpl	r2, #1
 80a18aa:	601a      	strpl	r2, [r3, #0]
 80a18ac:	4b0c      	ldr	r3, [pc, #48]	; (80a18e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a18ae:	681a      	ldr	r2, [r3, #0]
 80a18b0:	07d1      	lsls	r1, r2, #31
 80a18b2:	bf5c      	itt	pl
 80a18b4:	2201      	movpl	r2, #1
 80a18b6:	601a      	strpl	r2, [r3, #0]
 80a18b8:	4b0a      	ldr	r3, [pc, #40]	; (80a18e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a18ba:	681a      	ldr	r2, [r3, #0]
 80a18bc:	07d2      	lsls	r2, r2, #31
 80a18be:	bf5c      	itt	pl
 80a18c0:	2201      	movpl	r2, #1
 80a18c2:	601a      	strpl	r2, [r3, #0]
 80a18c4:	4770      	bx	lr
 80a18c6:	bf00      	nop
 80a18c8:	20000604 	.word	0x20000604
 80a18cc:	20000600 	.word	0x20000600
 80a18d0:	200005fc 	.word	0x200005fc
 80a18d4:	200005f8 	.word	0x200005f8
 80a18d8:	200005f4 	.word	0x200005f4
 80a18dc:	200005f0 	.word	0x200005f0
 80a18e0:	200005ec 	.word	0x200005ec
 80a18e4:	200005e8 	.word	0x200005e8

080a18e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a18e8:	4b24      	ldr	r3, [pc, #144]	; (80a197c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a18ea:	681a      	ldr	r2, [r3, #0]
 80a18ec:	07d0      	lsls	r0, r2, #31
 80a18ee:	bf5c      	itt	pl
 80a18f0:	2201      	movpl	r2, #1
 80a18f2:	601a      	strpl	r2, [r3, #0]
 80a18f4:	4b22      	ldr	r3, [pc, #136]	; (80a1980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a18f6:	681a      	ldr	r2, [r3, #0]
 80a18f8:	07d1      	lsls	r1, r2, #31
 80a18fa:	bf5c      	itt	pl
 80a18fc:	2201      	movpl	r2, #1
 80a18fe:	601a      	strpl	r2, [r3, #0]
 80a1900:	4b20      	ldr	r3, [pc, #128]	; (80a1984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1902:	681a      	ldr	r2, [r3, #0]
 80a1904:	07d2      	lsls	r2, r2, #31
 80a1906:	bf5c      	itt	pl
 80a1908:	2201      	movpl	r2, #1
 80a190a:	601a      	strpl	r2, [r3, #0]
 80a190c:	4b1e      	ldr	r3, [pc, #120]	; (80a1988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a190e:	681a      	ldr	r2, [r3, #0]
 80a1910:	07d0      	lsls	r0, r2, #31
 80a1912:	bf5c      	itt	pl
 80a1914:	2201      	movpl	r2, #1
 80a1916:	601a      	strpl	r2, [r3, #0]
 80a1918:	4b1c      	ldr	r3, [pc, #112]	; (80a198c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a191a:	681a      	ldr	r2, [r3, #0]
 80a191c:	07d1      	lsls	r1, r2, #31
 80a191e:	bf5c      	itt	pl
 80a1920:	2201      	movpl	r2, #1
 80a1922:	601a      	strpl	r2, [r3, #0]
 80a1924:	4b1a      	ldr	r3, [pc, #104]	; (80a1990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1926:	681a      	ldr	r2, [r3, #0]
 80a1928:	07d2      	lsls	r2, r2, #31
 80a192a:	bf5c      	itt	pl
 80a192c:	2201      	movpl	r2, #1
 80a192e:	601a      	strpl	r2, [r3, #0]
 80a1930:	4b18      	ldr	r3, [pc, #96]	; (80a1994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1932:	681a      	ldr	r2, [r3, #0]
 80a1934:	07d0      	lsls	r0, r2, #31
 80a1936:	bf5c      	itt	pl
 80a1938:	2201      	movpl	r2, #1
 80a193a:	601a      	strpl	r2, [r3, #0]
 80a193c:	4b16      	ldr	r3, [pc, #88]	; (80a1998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a193e:	681a      	ldr	r2, [r3, #0]
 80a1940:	07d1      	lsls	r1, r2, #31
 80a1942:	bf5c      	itt	pl
 80a1944:	2201      	movpl	r2, #1
 80a1946:	601a      	strpl	r2, [r3, #0]
 80a1948:	4b14      	ldr	r3, [pc, #80]	; (80a199c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a194a:	681a      	ldr	r2, [r3, #0]
 80a194c:	07d2      	lsls	r2, r2, #31
 80a194e:	bf5c      	itt	pl
 80a1950:	2201      	movpl	r2, #1
 80a1952:	601a      	strpl	r2, [r3, #0]
 80a1954:	4b12      	ldr	r3, [pc, #72]	; (80a19a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1956:	681a      	ldr	r2, [r3, #0]
 80a1958:	07d0      	lsls	r0, r2, #31
 80a195a:	bf5c      	itt	pl
 80a195c:	2201      	movpl	r2, #1
 80a195e:	601a      	strpl	r2, [r3, #0]
 80a1960:	4b10      	ldr	r3, [pc, #64]	; (80a19a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1962:	681a      	ldr	r2, [r3, #0]
 80a1964:	07d1      	lsls	r1, r2, #31
 80a1966:	bf5c      	itt	pl
 80a1968:	2201      	movpl	r2, #1
 80a196a:	601a      	strpl	r2, [r3, #0]
 80a196c:	4b0e      	ldr	r3, [pc, #56]	; (80a19a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a196e:	681a      	ldr	r2, [r3, #0]
 80a1970:	07d2      	lsls	r2, r2, #31
 80a1972:	bf5c      	itt	pl
 80a1974:	2201      	movpl	r2, #1
 80a1976:	601a      	strpl	r2, [r3, #0]
 80a1978:	4770      	bx	lr
 80a197a:	bf00      	nop
 80a197c:	20000634 	.word	0x20000634
 80a1980:	20000630 	.word	0x20000630
 80a1984:	2000062c 	.word	0x2000062c
 80a1988:	20000628 	.word	0x20000628
 80a198c:	20000624 	.word	0x20000624
 80a1990:	20000620 	.word	0x20000620
 80a1994:	2000061c 	.word	0x2000061c
 80a1998:	20000618 	.word	0x20000618
 80a199c:	20000614 	.word	0x20000614
 80a19a0:	20000610 	.word	0x20000610
 80a19a4:	2000060c 	.word	0x2000060c
 80a19a8:	20000608 	.word	0x20000608

080a19ac <__aeabi_frsub>:
 80a19ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a19b0:	e002      	b.n	80a19b8 <__addsf3>
 80a19b2:	bf00      	nop

080a19b4 <__aeabi_fsub>:
 80a19b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a19b8 <__addsf3>:
 80a19b8:	0042      	lsls	r2, r0, #1
 80a19ba:	bf1f      	itttt	ne
 80a19bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a19c0:	ea92 0f03 	teqne	r2, r3
 80a19c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a19c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a19cc:	d06a      	beq.n	80a1aa4 <__addsf3+0xec>
 80a19ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a19d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a19d6:	bfc1      	itttt	gt
 80a19d8:	18d2      	addgt	r2, r2, r3
 80a19da:	4041      	eorgt	r1, r0
 80a19dc:	4048      	eorgt	r0, r1
 80a19de:	4041      	eorgt	r1, r0
 80a19e0:	bfb8      	it	lt
 80a19e2:	425b      	neglt	r3, r3
 80a19e4:	2b19      	cmp	r3, #25
 80a19e6:	bf88      	it	hi
 80a19e8:	4770      	bxhi	lr
 80a19ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a19ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a19f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a19f6:	bf18      	it	ne
 80a19f8:	4240      	negne	r0, r0
 80a19fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a19fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a1a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a1a06:	bf18      	it	ne
 80a1a08:	4249      	negne	r1, r1
 80a1a0a:	ea92 0f03 	teq	r2, r3
 80a1a0e:	d03f      	beq.n	80a1a90 <__addsf3+0xd8>
 80a1a10:	f1a2 0201 	sub.w	r2, r2, #1
 80a1a14:	fa41 fc03 	asr.w	ip, r1, r3
 80a1a18:	eb10 000c 	adds.w	r0, r0, ip
 80a1a1c:	f1c3 0320 	rsb	r3, r3, #32
 80a1a20:	fa01 f103 	lsl.w	r1, r1, r3
 80a1a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1a28:	d502      	bpl.n	80a1a30 <__addsf3+0x78>
 80a1a2a:	4249      	negs	r1, r1
 80a1a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a1a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1a34:	d313      	bcc.n	80a1a5e <__addsf3+0xa6>
 80a1a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a1a3a:	d306      	bcc.n	80a1a4a <__addsf3+0x92>
 80a1a3c:	0840      	lsrs	r0, r0, #1
 80a1a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 80a1a42:	f102 0201 	add.w	r2, r2, #1
 80a1a46:	2afe      	cmp	r2, #254	; 0xfe
 80a1a48:	d251      	bcs.n	80a1aee <__addsf3+0x136>
 80a1a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a1a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1a52:	bf08      	it	eq
 80a1a54:	f020 0001 	biceq.w	r0, r0, #1
 80a1a58:	ea40 0003 	orr.w	r0, r0, r3
 80a1a5c:	4770      	bx	lr
 80a1a5e:	0049      	lsls	r1, r1, #1
 80a1a60:	eb40 0000 	adc.w	r0, r0, r0
 80a1a64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a1a68:	f1a2 0201 	sub.w	r2, r2, #1
 80a1a6c:	d1ed      	bne.n	80a1a4a <__addsf3+0x92>
 80a1a6e:	fab0 fc80 	clz	ip, r0
 80a1a72:	f1ac 0c08 	sub.w	ip, ip, #8
 80a1a76:	ebb2 020c 	subs.w	r2, r2, ip
 80a1a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 80a1a7e:	bfaa      	itet	ge
 80a1a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a1a84:	4252      	neglt	r2, r2
 80a1a86:	4318      	orrge	r0, r3
 80a1a88:	bfbc      	itt	lt
 80a1a8a:	40d0      	lsrlt	r0, r2
 80a1a8c:	4318      	orrlt	r0, r3
 80a1a8e:	4770      	bx	lr
 80a1a90:	f092 0f00 	teq	r2, #0
 80a1a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a1a98:	bf06      	itte	eq
 80a1a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a1a9e:	3201      	addeq	r2, #1
 80a1aa0:	3b01      	subne	r3, #1
 80a1aa2:	e7b5      	b.n	80a1a10 <__addsf3+0x58>
 80a1aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a1aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a1aac:	bf18      	it	ne
 80a1aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a1ab2:	d021      	beq.n	80a1af8 <__addsf3+0x140>
 80a1ab4:	ea92 0f03 	teq	r2, r3
 80a1ab8:	d004      	beq.n	80a1ac4 <__addsf3+0x10c>
 80a1aba:	f092 0f00 	teq	r2, #0
 80a1abe:	bf08      	it	eq
 80a1ac0:	4608      	moveq	r0, r1
 80a1ac2:	4770      	bx	lr
 80a1ac4:	ea90 0f01 	teq	r0, r1
 80a1ac8:	bf1c      	itt	ne
 80a1aca:	2000      	movne	r0, #0
 80a1acc:	4770      	bxne	lr
 80a1ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a1ad2:	d104      	bne.n	80a1ade <__addsf3+0x126>
 80a1ad4:	0040      	lsls	r0, r0, #1
 80a1ad6:	bf28      	it	cs
 80a1ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a1adc:	4770      	bx	lr
 80a1ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a1ae2:	bf3c      	itt	cc
 80a1ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a1ae8:	4770      	bxcc	lr
 80a1aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a1aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a1af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1af6:	4770      	bx	lr
 80a1af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a1afc:	bf16      	itet	ne
 80a1afe:	4608      	movne	r0, r1
 80a1b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a1b04:	4601      	movne	r1, r0
 80a1b06:	0242      	lsls	r2, r0, #9
 80a1b08:	bf06      	itte	eq
 80a1b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a1b0e:	ea90 0f01 	teqeq	r0, r1
 80a1b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a1b16:	4770      	bx	lr

080a1b18 <__aeabi_ui2f>:
 80a1b18:	f04f 0300 	mov.w	r3, #0
 80a1b1c:	e004      	b.n	80a1b28 <__aeabi_i2f+0x8>
 80a1b1e:	bf00      	nop

080a1b20 <__aeabi_i2f>:
 80a1b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a1b24:	bf48      	it	mi
 80a1b26:	4240      	negmi	r0, r0
 80a1b28:	ea5f 0c00 	movs.w	ip, r0
 80a1b2c:	bf08      	it	eq
 80a1b2e:	4770      	bxeq	lr
 80a1b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a1b34:	4601      	mov	r1, r0
 80a1b36:	f04f 0000 	mov.w	r0, #0
 80a1b3a:	e01c      	b.n	80a1b76 <__aeabi_l2f+0x2a>

080a1b3c <__aeabi_ul2f>:
 80a1b3c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1b40:	bf08      	it	eq
 80a1b42:	4770      	bxeq	lr
 80a1b44:	f04f 0300 	mov.w	r3, #0
 80a1b48:	e00a      	b.n	80a1b60 <__aeabi_l2f+0x14>
 80a1b4a:	bf00      	nop

080a1b4c <__aeabi_l2f>:
 80a1b4c:	ea50 0201 	orrs.w	r2, r0, r1
 80a1b50:	bf08      	it	eq
 80a1b52:	4770      	bxeq	lr
 80a1b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a1b58:	d502      	bpl.n	80a1b60 <__aeabi_l2f+0x14>
 80a1b5a:	4240      	negs	r0, r0
 80a1b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a1b60:	ea5f 0c01 	movs.w	ip, r1
 80a1b64:	bf02      	ittt	eq
 80a1b66:	4684      	moveq	ip, r0
 80a1b68:	4601      	moveq	r1, r0
 80a1b6a:	2000      	moveq	r0, #0
 80a1b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a1b70:	bf08      	it	eq
 80a1b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a1b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a1b7a:	fabc f28c 	clz	r2, ip
 80a1b7e:	3a08      	subs	r2, #8
 80a1b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a1b84:	db10      	blt.n	80a1ba8 <__aeabi_l2f+0x5c>
 80a1b86:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1b8a:	4463      	add	r3, ip
 80a1b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1b90:	f1c2 0220 	rsb	r2, r2, #32
 80a1b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a1b98:	fa20 f202 	lsr.w	r2, r0, r2
 80a1b9c:	eb43 0002 	adc.w	r0, r3, r2
 80a1ba0:	bf08      	it	eq
 80a1ba2:	f020 0001 	biceq.w	r0, r0, #1
 80a1ba6:	4770      	bx	lr
 80a1ba8:	f102 0220 	add.w	r2, r2, #32
 80a1bac:	fa01 fc02 	lsl.w	ip, r1, r2
 80a1bb0:	f1c2 0220 	rsb	r2, r2, #32
 80a1bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a1bb8:	fa21 f202 	lsr.w	r2, r1, r2
 80a1bbc:	eb43 0002 	adc.w	r0, r3, r2
 80a1bc0:	bf08      	it	eq
 80a1bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1bc6:	4770      	bx	lr

080a1bc8 <__aeabi_fmul>:
 80a1bc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1bcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1bd0:	bf1e      	ittt	ne
 80a1bd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1bd6:	ea92 0f0c 	teqne	r2, ip
 80a1bda:	ea93 0f0c 	teqne	r3, ip
 80a1bde:	d06f      	beq.n	80a1cc0 <__aeabi_fmul+0xf8>
 80a1be0:	441a      	add	r2, r3
 80a1be2:	ea80 0c01 	eor.w	ip, r0, r1
 80a1be6:	0240      	lsls	r0, r0, #9
 80a1be8:	bf18      	it	ne
 80a1bea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a1bee:	d01e      	beq.n	80a1c2e <__aeabi_fmul+0x66>
 80a1bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a1bf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a1bf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a1bfc:	fba0 3101 	umull	r3, r1, r0, r1
 80a1c00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1c04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a1c08:	bf3e      	ittt	cc
 80a1c0a:	0049      	lslcc	r1, r1, #1
 80a1c0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a1c10:	005b      	lslcc	r3, r3, #1
 80a1c12:	ea40 0001 	orr.w	r0, r0, r1
 80a1c16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a1c1a:	2afd      	cmp	r2, #253	; 0xfd
 80a1c1c:	d81d      	bhi.n	80a1c5a <__aeabi_fmul+0x92>
 80a1c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a1c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1c26:	bf08      	it	eq
 80a1c28:	f020 0001 	biceq.w	r0, r0, #1
 80a1c2c:	4770      	bx	lr
 80a1c2e:	f090 0f00 	teq	r0, #0
 80a1c32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1c36:	bf08      	it	eq
 80a1c38:	0249      	lsleq	r1, r1, #9
 80a1c3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1c3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a1c42:	3a7f      	subs	r2, #127	; 0x7f
 80a1c44:	bfc2      	ittt	gt
 80a1c46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1c4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1c4e:	4770      	bxgt	lr
 80a1c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1c54:	f04f 0300 	mov.w	r3, #0
 80a1c58:	3a01      	subs	r2, #1
 80a1c5a:	dc5d      	bgt.n	80a1d18 <__aeabi_fmul+0x150>
 80a1c5c:	f112 0f19 	cmn.w	r2, #25
 80a1c60:	bfdc      	itt	le
 80a1c62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a1c66:	4770      	bxle	lr
 80a1c68:	f1c2 0200 	rsb	r2, r2, #0
 80a1c6c:	0041      	lsls	r1, r0, #1
 80a1c6e:	fa21 f102 	lsr.w	r1, r1, r2
 80a1c72:	f1c2 0220 	rsb	r2, r2, #32
 80a1c76:	fa00 fc02 	lsl.w	ip, r0, r2
 80a1c7a:	ea5f 0031 	movs.w	r0, r1, rrx
 80a1c7e:	f140 0000 	adc.w	r0, r0, #0
 80a1c82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a1c86:	bf08      	it	eq
 80a1c88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a1c8c:	4770      	bx	lr
 80a1c8e:	f092 0f00 	teq	r2, #0
 80a1c92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1c96:	bf02      	ittt	eq
 80a1c98:	0040      	lsleq	r0, r0, #1
 80a1c9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1c9e:	3a01      	subeq	r2, #1
 80a1ca0:	d0f9      	beq.n	80a1c96 <__aeabi_fmul+0xce>
 80a1ca2:	ea40 000c 	orr.w	r0, r0, ip
 80a1ca6:	f093 0f00 	teq	r3, #0
 80a1caa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1cae:	bf02      	ittt	eq
 80a1cb0:	0049      	lsleq	r1, r1, #1
 80a1cb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1cb6:	3b01      	subeq	r3, #1
 80a1cb8:	d0f9      	beq.n	80a1cae <__aeabi_fmul+0xe6>
 80a1cba:	ea41 010c 	orr.w	r1, r1, ip
 80a1cbe:	e78f      	b.n	80a1be0 <__aeabi_fmul+0x18>
 80a1cc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1cc4:	ea92 0f0c 	teq	r2, ip
 80a1cc8:	bf18      	it	ne
 80a1cca:	ea93 0f0c 	teqne	r3, ip
 80a1cce:	d00a      	beq.n	80a1ce6 <__aeabi_fmul+0x11e>
 80a1cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1cd4:	bf18      	it	ne
 80a1cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1cda:	d1d8      	bne.n	80a1c8e <__aeabi_fmul+0xc6>
 80a1cdc:	ea80 0001 	eor.w	r0, r0, r1
 80a1ce0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1ce4:	4770      	bx	lr
 80a1ce6:	f090 0f00 	teq	r0, #0
 80a1cea:	bf17      	itett	ne
 80a1cec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a1cf0:	4608      	moveq	r0, r1
 80a1cf2:	f091 0f00 	teqne	r1, #0
 80a1cf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a1cfa:	d014      	beq.n	80a1d26 <__aeabi_fmul+0x15e>
 80a1cfc:	ea92 0f0c 	teq	r2, ip
 80a1d00:	d101      	bne.n	80a1d06 <__aeabi_fmul+0x13e>
 80a1d02:	0242      	lsls	r2, r0, #9
 80a1d04:	d10f      	bne.n	80a1d26 <__aeabi_fmul+0x15e>
 80a1d06:	ea93 0f0c 	teq	r3, ip
 80a1d0a:	d103      	bne.n	80a1d14 <__aeabi_fmul+0x14c>
 80a1d0c:	024b      	lsls	r3, r1, #9
 80a1d0e:	bf18      	it	ne
 80a1d10:	4608      	movne	r0, r1
 80a1d12:	d108      	bne.n	80a1d26 <__aeabi_fmul+0x15e>
 80a1d14:	ea80 0001 	eor.w	r0, r0, r1
 80a1d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a1d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1d24:	4770      	bx	lr
 80a1d26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a1d2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a1d2e:	4770      	bx	lr

080a1d30 <__aeabi_fdiv>:
 80a1d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a1d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a1d38:	bf1e      	ittt	ne
 80a1d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a1d3e:	ea92 0f0c 	teqne	r2, ip
 80a1d42:	ea93 0f0c 	teqne	r3, ip
 80a1d46:	d069      	beq.n	80a1e1c <__aeabi_fdiv+0xec>
 80a1d48:	eba2 0203 	sub.w	r2, r2, r3
 80a1d4c:	ea80 0c01 	eor.w	ip, r0, r1
 80a1d50:	0249      	lsls	r1, r1, #9
 80a1d52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a1d56:	d037      	beq.n	80a1dc8 <__aeabi_fdiv+0x98>
 80a1d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a1d5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a1d60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a1d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a1d68:	428b      	cmp	r3, r1
 80a1d6a:	bf38      	it	cc
 80a1d6c:	005b      	lslcc	r3, r3, #1
 80a1d6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a1d72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a1d76:	428b      	cmp	r3, r1
 80a1d78:	bf24      	itt	cs
 80a1d7a:	1a5b      	subcs	r3, r3, r1
 80a1d7c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a1d80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a1d84:	bf24      	itt	cs
 80a1d86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a1d8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a1d8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a1d92:	bf24      	itt	cs
 80a1d94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a1d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a1d9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a1da0:	bf24      	itt	cs
 80a1da2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a1da6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a1daa:	011b      	lsls	r3, r3, #4
 80a1dac:	bf18      	it	ne
 80a1dae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a1db2:	d1e0      	bne.n	80a1d76 <__aeabi_fdiv+0x46>
 80a1db4:	2afd      	cmp	r2, #253	; 0xfd
 80a1db6:	f63f af50 	bhi.w	80a1c5a <__aeabi_fmul+0x92>
 80a1dba:	428b      	cmp	r3, r1
 80a1dbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a1dc0:	bf08      	it	eq
 80a1dc2:	f020 0001 	biceq.w	r0, r0, #1
 80a1dc6:	4770      	bx	lr
 80a1dc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a1dcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a1dd0:	327f      	adds	r2, #127	; 0x7f
 80a1dd2:	bfc2      	ittt	gt
 80a1dd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a1dd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a1ddc:	4770      	bxgt	lr
 80a1dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a1de2:	f04f 0300 	mov.w	r3, #0
 80a1de6:	3a01      	subs	r2, #1
 80a1de8:	e737      	b.n	80a1c5a <__aeabi_fmul+0x92>
 80a1dea:	f092 0f00 	teq	r2, #0
 80a1dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a1df2:	bf02      	ittt	eq
 80a1df4:	0040      	lsleq	r0, r0, #1
 80a1df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a1dfa:	3a01      	subeq	r2, #1
 80a1dfc:	d0f9      	beq.n	80a1df2 <__aeabi_fdiv+0xc2>
 80a1dfe:	ea40 000c 	orr.w	r0, r0, ip
 80a1e02:	f093 0f00 	teq	r3, #0
 80a1e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a1e0a:	bf02      	ittt	eq
 80a1e0c:	0049      	lsleq	r1, r1, #1
 80a1e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a1e12:	3b01      	subeq	r3, #1
 80a1e14:	d0f9      	beq.n	80a1e0a <__aeabi_fdiv+0xda>
 80a1e16:	ea41 010c 	orr.w	r1, r1, ip
 80a1e1a:	e795      	b.n	80a1d48 <__aeabi_fdiv+0x18>
 80a1e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a1e20:	ea92 0f0c 	teq	r2, ip
 80a1e24:	d108      	bne.n	80a1e38 <__aeabi_fdiv+0x108>
 80a1e26:	0242      	lsls	r2, r0, #9
 80a1e28:	f47f af7d 	bne.w	80a1d26 <__aeabi_fmul+0x15e>
 80a1e2c:	ea93 0f0c 	teq	r3, ip
 80a1e30:	f47f af70 	bne.w	80a1d14 <__aeabi_fmul+0x14c>
 80a1e34:	4608      	mov	r0, r1
 80a1e36:	e776      	b.n	80a1d26 <__aeabi_fmul+0x15e>
 80a1e38:	ea93 0f0c 	teq	r3, ip
 80a1e3c:	d104      	bne.n	80a1e48 <__aeabi_fdiv+0x118>
 80a1e3e:	024b      	lsls	r3, r1, #9
 80a1e40:	f43f af4c 	beq.w	80a1cdc <__aeabi_fmul+0x114>
 80a1e44:	4608      	mov	r0, r1
 80a1e46:	e76e      	b.n	80a1d26 <__aeabi_fmul+0x15e>
 80a1e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a1e4c:	bf18      	it	ne
 80a1e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a1e52:	d1ca      	bne.n	80a1dea <__aeabi_fdiv+0xba>
 80a1e54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a1e58:	f47f af5c 	bne.w	80a1d14 <__aeabi_fmul+0x14c>
 80a1e5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a1e60:	f47f af3c 	bne.w	80a1cdc <__aeabi_fmul+0x114>
 80a1e64:	e75f      	b.n	80a1d26 <__aeabi_fmul+0x15e>
 80a1e66:	bf00      	nop

080a1e68 <__aeabi_f2iz>:
 80a1e68:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a1e6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80a1e70:	d30f      	bcc.n	80a1e92 <__aeabi_f2iz+0x2a>
 80a1e72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80a1e76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80a1e7a:	d90d      	bls.n	80a1e98 <__aeabi_f2iz+0x30>
 80a1e7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80a1e80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a1e84:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a1e88:	fa23 f002 	lsr.w	r0, r3, r2
 80a1e8c:	bf18      	it	ne
 80a1e8e:	4240      	negne	r0, r0
 80a1e90:	4770      	bx	lr
 80a1e92:	f04f 0000 	mov.w	r0, #0
 80a1e96:	4770      	bx	lr
 80a1e98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80a1e9c:	d101      	bne.n	80a1ea2 <__aeabi_f2iz+0x3a>
 80a1e9e:	0242      	lsls	r2, r0, #9
 80a1ea0:	d105      	bne.n	80a1eae <__aeabi_f2iz+0x46>
 80a1ea2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80a1ea6:	bf08      	it	eq
 80a1ea8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a1eac:	4770      	bx	lr
 80a1eae:	f04f 0000 	mov.w	r0, #0
 80a1eb2:	4770      	bx	lr

080a1eb4 <__cxa_atexit>:
 80a1eb4:	b510      	push	{r4, lr}
 80a1eb6:	4c05      	ldr	r4, [pc, #20]	; (80a1ecc <__cxa_atexit+0x18>)
 80a1eb8:	4613      	mov	r3, r2
 80a1eba:	b12c      	cbz	r4, 80a1ec8 <__cxa_atexit+0x14>
 80a1ebc:	460a      	mov	r2, r1
 80a1ebe:	4601      	mov	r1, r0
 80a1ec0:	2002      	movs	r0, #2
 80a1ec2:	f3af 8000 	nop.w
 80a1ec6:	bd10      	pop	{r4, pc}
 80a1ec8:	4620      	mov	r0, r4
 80a1eca:	bd10      	pop	{r4, pc}
 80a1ecc:	00000000 	.word	0x00000000

080a1ed0 <memcpy>:
 80a1ed0:	b510      	push	{r4, lr}
 80a1ed2:	1e43      	subs	r3, r0, #1
 80a1ed4:	440a      	add	r2, r1
 80a1ed6:	4291      	cmp	r1, r2
 80a1ed8:	d004      	beq.n	80a1ee4 <memcpy+0x14>
 80a1eda:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a1ede:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a1ee2:	e7f8      	b.n	80a1ed6 <memcpy+0x6>
 80a1ee4:	bd10      	pop	{r4, pc}

080a1ee6 <memset>:
 80a1ee6:	4603      	mov	r3, r0
 80a1ee8:	4402      	add	r2, r0
 80a1eea:	4293      	cmp	r3, r2
 80a1eec:	d002      	beq.n	80a1ef4 <memset+0xe>
 80a1eee:	f803 1b01 	strb.w	r1, [r3], #1
 80a1ef2:	e7fa      	b.n	80a1eea <memset+0x4>
 80a1ef4:	4770      	bx	lr
	...

080a1ef8 <srand>:
 80a1ef8:	b538      	push	{r3, r4, r5, lr}
 80a1efa:	4b12      	ldr	r3, [pc, #72]	; (80a1f44 <srand+0x4c>)
 80a1efc:	4605      	mov	r5, r0
 80a1efe:	681c      	ldr	r4, [r3, #0]
 80a1f00:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1f02:	b9d3      	cbnz	r3, 80a1f3a <srand+0x42>
 80a1f04:	2018      	movs	r0, #24
 80a1f06:	f7fe feb9 	bl	80a0c7c <malloc>
 80a1f0a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a1f0e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a1f10:	8003      	strh	r3, [r0, #0]
 80a1f12:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1f16:	8043      	strh	r3, [r0, #2]
 80a1f18:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1f1c:	8083      	strh	r3, [r0, #4]
 80a1f1e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a1f22:	80c3      	strh	r3, [r0, #6]
 80a1f24:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1f28:	8103      	strh	r3, [r0, #8]
 80a1f2a:	2305      	movs	r3, #5
 80a1f2c:	8143      	strh	r3, [r0, #10]
 80a1f2e:	230b      	movs	r3, #11
 80a1f30:	8183      	strh	r3, [r0, #12]
 80a1f32:	2201      	movs	r2, #1
 80a1f34:	2300      	movs	r3, #0
 80a1f36:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a1f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a1f3c:	2200      	movs	r2, #0
 80a1f3e:	611d      	str	r5, [r3, #16]
 80a1f40:	615a      	str	r2, [r3, #20]
 80a1f42:	bd38      	pop	{r3, r4, r5, pc}
 80a1f44:	2000006c 	.word	0x2000006c

080a1f48 <strlen>:
 80a1f48:	4603      	mov	r3, r0
 80a1f4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a1f4e:	2a00      	cmp	r2, #0
 80a1f50:	d1fb      	bne.n	80a1f4a <strlen+0x2>
 80a1f52:	1a18      	subs	r0, r3, r0
 80a1f54:	3801      	subs	r0, #1
 80a1f56:	4770      	bx	lr

080a1f58 <dynalib_user>:
 80a1f58:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a1f68:	0000 0000                                   ....

080a1f6c <_ZL4font>:
 80a1f6c:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a1f7c:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a1f8c:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a1f9c:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a1fac:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a1fbc:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a1fcc:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a1fdc:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a1fec:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a1ffc:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a200c:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a201c:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a202c:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a203c:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a204c:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a205c:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a206c:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a207c:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a208c:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a209c:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a20ac:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a20bc:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a20cc:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a20dc:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a20ec:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a20fc:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a210c:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a211c:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a212c:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a213c:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a214c:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a215c:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a216c:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a217c:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a218c:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a219c:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a21ac:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a21bc:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a21cc:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a21dc:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a21ec:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a21fc:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 80a220c:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a221c:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a222c:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 80a223c:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a224c:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 80a225c:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 80a226c:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 80a227c:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a228c:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a229c:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a22ac:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a22bc:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a22cc:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a22dc:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 80a22ec:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 80a22fc:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 80a230c:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 80a231c:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 80a232c:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 80a233c:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 80a234c:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 80a235c:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 80a236c:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 80a237c:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 80a238c:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 80a239c:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 80a23ac:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 80a23bc:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 80a23cc:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 80a23dc:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 80a23ec:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 80a23fc:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 80a240c:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 80a241c:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 80a242c:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 80a243c:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 80a244c:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 80a245c:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

080a246c <_ZTV12Adafruit_GFX>:
	...
 80a247c:	0675 080a 0efd 080a 00a1 080a 0259 080a     u...........Y...
 80a248c:	0379 080a 0395 080a 0319 080a 03af 080a     y...............
 80a249c:	03e7 080a 0403 080a                         ........

080a24a4 <_ZTV18Adafruit_8x8matrix>:
	...
 80a24ac:	00c5 080a 0221 080a 0675 080a 0efd 080a     ....!...u.......
 80a24bc:	0773 080a 0259 080a 0379 080a 0395 080a     s...Y...y.......
 80a24cc:	0319 080a 03af 080a 03e7 080a 0403 080a     ................

080a24dc <_ZTV7TwoWire>:
	...
 80a24e4:	0cb5 080a 0cff 080a 0cd7 080a 0cb7 080a     ................
 80a24f4:	0cdf 080a 0ce7 080a 0cef 080a 0cf7 080a     ................

080a2504 <_ZTV9IPAddress>:
	...
 80a250c:	0d6b 080a 0d5b 080a 0d5d 080a 6162 6475     k...[...]...baud
 80a251c:	5300 7265 6169 006c 5355 5342 7265 6169     .Serial.USBSeria
 80a252c:	316c 7400 7079 0065 6170 6172 006d 6d63     l1.type.param.cm
 80a253c:	0064 6469 6800 646e 7300 7274 006d 6966     d.id.hnd.strm.fi
 80a254c:	746c 6c00 6c76 6100 6464 6148 646e 656c     lt.lvl.addHandle
 80a255c:	0072 6572 6f6d 6576 6148 646e 656c 0072     r.removeHandler.
 80a256c:	6e65 6d75 6148 646e 656c 7372 4a00 4f53     enumHandlers.JSO
 80a257c:	534e 7274 6165 4c6d 676f 6148 646e 656c     NStreamLogHandle
 80a258c:	0072 7061 0070 3025 3031 2075 5d00 0020     r.app.%010u .] .
 80a259c:	6425 2c00 0020 2928 203a 2000 005b 6f63     %d., .(): . [.co
 80a25ac:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a25bc:	3d20 0020 0a0d 6600 6c00 006e 6e66 6300      = ....f.ln.fn.c
 80a25cc:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a25dc:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a25ec:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.

080a25fc <_ZTVN5spark12NetworkClassE>:
	...
 80a2604:	0e31 080a 0e3b 080a 0e45 080a 0e4f 080a     1...;...E...O...
 80a2614:	0e59 080a 0e65 080a 0e71 080a 0e7d 080a     Y...e...q...}...
 80a2624:	0e85 080a 0e8f 080a 0e99 080a               ............

080a2630 <_ZTV8SPIClass>:
	...
 80a2638:	0fcd 080a 0fe5 080a 005a 2b25 3330 3a64     ........Z.%+03d:
 80a2648:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a2658:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a2668:	0000 0000                                   ....

080a266c <_ZTV11USARTSerial>:
	...
 80a2674:	108d 080a 10dd 080a 10eb 080a 0efd 080a     ................
 80a2684:	10a1 080a 10c3 080a 10af 080a 10d7 080a     ................
 80a2694:	108f 080a 1093 080a                         ........

080a269c <_ZTV9USBSerial>:
	...
 80a26a4:	1195 080a 11e5 080a 11f3 080a 0efd 080a     ................
 80a26b4:	11d1 080a 1197 080a 11ad 080a 11df 080a     ................
 80a26c4:	11c3 080a 1191 080a                         ........

080a26cc <_ZTVN5spark9WiFiClassE>:
	...
 80a26d4:	13d7 080a 13cd 080a 13c3 080a 1335 080a     ............5...
 80a26e4:	13b7 080a 13ab 080a 139f 080a 1397 080a     ................
 80a26f4:	138d 080a 1383 080a 133f 080a               ........?...

080a2700 <_ZSt7nothrow>:
 80a2700:	0000 0000                                   ....

080a2704 <__sf_fake_stdin>:
	...

080a2724 <__sf_fake_stdout>:
	...

080a2744 <__sf_fake_stderr>:
	...
 80a2764:	0043                                        C.

080a2766 <link_const_variable_data_end>:
	...

080a2768 <link_constructors_location>:
 80a2768:	080a0231 	.word	0x080a0231
 80a276c:	080a076f 	.word	0x080a076f
 80a2770:	080a08fd 	.word	0x080a08fd
 80a2774:	080a0e21 	.word	0x080a0e21
 80a2778:	080a0ee9 	.word	0x080a0ee9
 80a277c:	080a0fb1 	.word	0x080a0fb1
 80a2780:	080a1045 	.word	0x080a1045
 80a2784:	080a1079 	.word	0x080a1079
 80a2788:	080a13e1 	.word	0x080a13e1
 80a278c:	080a1669 	.word	0x080a1669
 80a2790:	080a171d 	.word	0x080a171d
 80a2794:	080a17e1 	.word	0x080a17e1
 80a2798:	080a1865 	.word	0x080a1865
 80a279c:	080a18e9 	.word	0x080a18e9
